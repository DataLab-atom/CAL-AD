def select_next_node(current_node: int, unvisited_nodes: np.ndarray, pheromone_matrix: np.ndarray, 
                        distance_matrix: np.ndarray, alpha: float, beta: float, exploration_bias: float = 0.1) -> int:
    """Select the next node based on a balanced ACO probability formula with an exploration bias."""
    pheromone = pheromone_matrix[current_node, unvisited_nodes]
    distance = distance_matrix[current_node, unvisited_nodes]
    
    # Calculate the attractiveness
    attractiveness = (pheromone ** alpha) * ((1.0 / distance) ** beta)
    
    # Introduce a small exploration bias to encourage exploration
    exploration_factor = np.random.rand() * exploration_bias
    attractiveness *= (1 + exploration_factor)
    
    # Normalize the attractiveness to form probabilities
    probabilities = attractiveness / np.sum(attractiveness)
    
    # Select the next node based on the computed probabilities
    next_node = np.random.choice(unvisited_nodes, p=probabilities)
    return next_node
