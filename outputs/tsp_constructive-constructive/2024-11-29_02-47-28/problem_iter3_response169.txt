import numpy as np

def construct_solution(start_node: int, pheromone_matrix: np.ndarray, distance_matrix: np.ndarray, 
                          alpha: float, beta: float) -> np.ndarray:
    """Construct a solution for the TSP using the ACO algorithm with improved heuristics."""
    num_points = pheromone_matrix.shape[0]
    solution = [start_node]
    unvisited_nodes = np.arange(num_points)
    unvisited_nodes = np.delete(unvisited_nodes, start_node)
    
    current_node = start_node
    while unvisited_nodes.size > 0:
        next_node = select_next_node(current_node, unvisited_nodes, pheromone_matrix, distance_matrix, alpha, beta)
        solution.append(next_node)
        unvisited_nodes = np.delete(unvisited_nodes, np.where(unvisited_nodes == next_node))
        current_node = next_node
    
    return np.array(solution)

def select_next_node(current_node: int, unvisited_nodes: np.ndarray, pheromone_matrix: np.ndarray, 
                        distance_matrix: np.ndarray, alpha: float, beta: float) -> int:
    """Select the next node based on the ACO probability formula with dynamic tuning."""
    pheromone = pheromone_matrix[current_node, unvisited_nodes]
    distance = distance_matrix[current_node, unvisited_nodes]
    
    # Dynamic tuning of alpha and beta based on the current state
    exploration_factor = np.random.uniform(0.5, 1.5)
    alpha *= exploration_factor
    beta /= exploration_factor
    
    attractiveness = (pheromone ** alpha) * ((1.0 / distance) ** beta)
    probabilities = attractiveness / np.sum(attractiveness)
    next_node = np.random.choice(unvisited_nodes, p=probabilities)
    return next_node
