def select_next_node(current_node: int, unvisited_nodes: np.ndarray, pheromone_matrix: np.ndarray, 
                       distance_matrix: np.ndarray, alpha: float, beta: float) -> int:
    """Select the next node based on the ACO probability formula with dynamic tuning and controlled randomness."""
    pheromone = pheromone_matrix[current_node, unvisited_nodes]
    distance = distance_matrix[current_node, unvisited_nodes]
    
    # Dynamic tuning of alpha and beta
    exploration_rate = 0.1  # Adjust this value to control exploration vs. exploitation
    alpha *= (1 - exploration_rate)
    beta *= exploration_rate
    
    attractiveness = (pheromone ** alpha) * ((1.0 / distance) ** beta)
    probabilities = attractiveness / np.sum(attractiveness)
    
    # Introduce controlled randomness
    if np.random.rand() < exploration_rate:
        next_node = np.random.choice(unvisited_nodes)
    else:
        next_node = np.random.choice(unvisited_nodes, p=probabilities)
    
    return next_node
