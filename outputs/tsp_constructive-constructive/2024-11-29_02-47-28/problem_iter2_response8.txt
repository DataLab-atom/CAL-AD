```python
def construct_solution_v2(start_node: int, pheromone_matrix: np.ndarray, distance_matrix: np.ndarray, 
                          alpha: float, beta: float) -> np.ndarray:
    """Construct a solution for the TSP using the ACO algorithm with optimized heuristics."""
    num_points = pheromone_matrix.shape[0]
    solution = [start_node]
    unvisited_nodes = np.arange(num_points)
    unvisited_nodes = np.delete(unvisited_nodes, start_node)
    
    current_node = start_node
    while unvisited_nodes.size > 0:
        # Calculate the attractiveness with an additional heuristic based on node centrality
        pheromone = pheromone_matrix[current_node, unvisited_nodes]
        distance = distance_matrix[current_node, unvisited_nodes]
        centrality = np.sum(distance_matrix[:, unvisited_nodes], axis=0) / (num_points - 1)
        attractiveness = (pheromone ** alpha) * ((1.0 / distance) ** beta) * (1.0 / centrality)
        probabilities = attractiveness / np.sum(attractiveness)
        
        # Select the next node based on the enhanced probabilities
        next_node = np.random.choice(unvisited_nodes, p=probabilities)
        solution.append(next_node)
        unvisited_nodes = np.delete(unvisited_nodes, np.where(unvisited_nodes == next_node))
        current_node = next_node
    
    return np.array(solution)
```
