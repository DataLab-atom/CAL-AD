```python
def initialize_pheromones_v2(distance_matrix: np.ndarray, initial_pheromone: float = 1.0, heuristic: str = 'inverse') -> np.ndarray:
    """Initialize the pheromone matrix with a heuristic-based value."""
    num_cities = distance_matrix.shape[0]
    pheromone_matrix = np.zeros_like(distance_matrix, dtype=float)
    
    if heuristic == 'inverse':
        # Initialize pheromones inversely proportional to the distance
        pheromone_matrix = initial_pheromone / (distance_matrix + np.finfo(float).eps)
    elif heuristic == 'nearest_neighbor':
        # Initialize pheromones based on the nearest neighbor heuristic
        for i in range(num_cities):
            nearest_neighbor_distance = np.min(distance_matrix[i, np.arange(num_cities) != i])
            pheromone_matrix[i, :] = initial_pheromone / (nearest_neighbor_distance + np.finfo(float).eps)
    elif heuristic == 'random':
        # Initialize pheromones randomly
        pheromone_matrix = np.random.uniform(0, initial_pheromone, size=distance_matrix.shape)
    else:
        raise ValueError("Unknown heuristic. Choose from 'inverse', 'nearest_neighbor', or 'random'.")
    
    # Ensure the diagonal is zero (no self-connections)
    np.fill_diagonal(pheromone_matrix, 0)
    
    return pheromone_matrix
```
