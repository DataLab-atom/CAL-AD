```python
def search_routine_v2(cal_total_distance: Callable, distance_matrix: np.ndarray, pop_size: int = 100, num_generations: int = 1000, mutation_rate: float = 0.01, alpha: float = 1.0, beta: float = 5.0, evaporation_rate: float = 0.5, Q: float = 100.0) -> np.ndarray:
    """Search for the optimal TSP routine using an enhanced Ant Colony Optimization."""
    num_cities = distance_matrix.shape[0]
    pheromone_matrix = initialize_pheromones(distance_matrix)
    best_tour = None
    best_distance = np.inf
    
    for generation in range(num_generations):
        tours = np.array([construct_solution(pheromone_matrix, distance_matrix, alpha, beta) for _ in range(pop_size)])
        distances = np.array([cal_total_distance(tour, distance_matrix) for tour in tours])
        
        # Apply mutation to diversify the population
        for i in range(len(tours)):
            if np.random.rand() < mutation_rate:
                tours[i] = np.random.permutation(tours[i])
        
        # Update best tour
        if np.min(distances) < best_distance:
            best_distance = np.min(distances)
            best_tour = tours[np.argmin(distances)]
        
        # Update pheromones
        pheromone_matrix = update_pheromones(pheromone_matrix, tours, distances, evaporation_rate, Q)
        
        # Local search improvement
        for i in range(len(tours)):
            improved_tour = two_opt_swap(tours[i], distance_matrix)
            improved_distance = cal_total_distance(improved_tour, distance_matrix)
            if improved_distance < distances[i]:
                tours[i] = improved_tour
                distances[i] = improved_distance
        
        # Update best tour again after local search
        if np.min(distances) < best_distance:
            best_distance = np.min(distances)
            best_tour = tours[np.argmin(distances)]
    
    return best_tour

def two_opt_swap(tour: np.ndarray, distance_matrix: np.ndarray) -> np.ndarray:
    """Apply 2-opt local search to improve the tour."""
    best_tour = np.copy(tour)
    improved = True
    while improved:
        improved = False
        for i in range(1, len(tour) - 2):
            for j in range(i + 1, len(tour)):
                if j - i == 1: continue  # changes nothing, skip then
                new_tour = tour[:i] + tour[i:j][::-1] + tour[j:]
                new_distance = cal_total_distance(new_tour, distance_matrix)
                if new_distance < cal_total_distance(best_tour, distance_matrix):
                    best_tour = new_tour
                    improved = True
        tour = best_tour
    return best_tour
```
