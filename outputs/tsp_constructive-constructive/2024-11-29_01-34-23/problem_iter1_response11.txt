```python
import numpy as np
from scipy import spatial
from typing import Callable, Tuple

def initialize_pheromones(num_points: int, initial_pheromone: float = 1.0) -> np.ndarray:
    """Initialize pheromone matrix with a constant value."""
    return np.full((num_points, num_points), initial_pheromone)

def select_next_city(current_city: int, unvisited_cities: np.ndarray, pheromone_matrix: np.ndarray, 
                     distance_matrix: np.ndarray, alpha: float, beta: float) -> int:
    """Select the next city based on pheromone levels and heuristic information."""
    pheromone = pheromone_matrix[current_city, unvisited_cities]
    heuristic = 1.0 / (distance_matrix[current_city, unvisited_cities] + 1e-10)
    probabilities = pheromone ** alpha * heuristic ** beta
    probabilities /= np.sum(probabilities)
    return np.random.choice(unvisited_cities, p=probabilities)

def construct_ant_path(start_node: int, pheromone_matrix: np.ndarray, distance_matrix: np.ndarray, 
                       alpha: float, beta: float) -> np.ndarray:
    """Construct a path for an ant starting from a given node."""
    num_points = distance_matrix.shape[0]
    path = [start_node]
    unvisited_cities = np.arange(num_points)
    unvisited_cities = np.delete(unvisited_cities, start_node)
    
    current_city = start_node
    while unvisited_cities.size > 0:
        next_city = select_next_city(current_city, unvisited_cities, pheromone_matrix, distance_matrix, alpha, beta)
        path.append(next_city)
        unvisited_cities = np.delete(unvisited_cities, np.where(unvisited_cities == next_city))
        current_city = next_city
    
    return np.array(path)

def update_pheromones(pheromone_matrix: np.ndarray, paths: np.ndarray, distances: np.ndarray, 
                      evaporation_rate: float, Q: float) -> np.ndarray:
    """Update pheromone levels based on the paths constructed by the ants."""
    pheromone_matrix *= (1 - evaporation_rate)
    for path, distance in zip(paths, distances):
        for i in range(len(path) - 1):
            pheromone_matrix[path[i], path[i + 1]] += Q / distance
            pheromone_matrix[path[i + 1], path[i]] += Q / distance
    return pheromone_matrix

def search_routine_v2(cal_total_distance: Callable, distance_matrix: np.ndarray, start_node: int, 
                      pop_size: int = 100, num_generations: int = 1000, mutation_rate: float = 0.01, 
                      alpha: float = 1.0, beta: float = 5.0, evaporation_rate: float = 0.5, Q: float = 100.0,
                      elite_ratio: float = 0.1) -> np.ndarray:
    """
    Search for the optimal routine using an enhanced Ant Colony Optimization (ACO) with elite ants.
    """
    num_points = distance_matrix.shape[0]
    pheromone_matrix = initialize_pheromones(num_points)
    best_path = None
    best_distance = np.inf
    elite_count = int(pop_size * elite_ratio)
    
    for generation in range(num_generations):
        paths = [construct_ant_path(start_node, pheromone_matrix, distance_matrix, alpha, beta) for _ in range(pop_size)]
        distances = np.array([cal_total_distance(path, distance_matrix) for path in paths])
        
        if np.min(distances) < best_distance:
            best_distance = np.min(distances)
            best_path
