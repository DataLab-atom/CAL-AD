```python
def mutate_v2(individual: Tuple[np.ndarray, int], total_ports: int) -> Tuple[np.ndarray, int]:
    '''
    Mutates an individual by introducing more sophisticated changes to its genes.

    Args:
        individual (Tuple[np.ndarray, int]): Individual to mutate.
        total_ports (int): Total number of ports.

    Returns:
        Tuple[np.ndarray, int]: Mutated individual.
    '''
    pi, probe = individual
    mutation_rate = 0.1
    mutation_strength = 0.05 * total_ports  # Adjust mutation strength based on total_ports

    # Mutate pi array
    for i in range(len(pi)):
        if random.random() < mutation_rate:
            # Introduce a small random change
            pi[i] = int((pi[i] + random.uniform(-mutation_strength, mutation_strength)) % total_ports)
    
    # Mutate probe
    if random.random() < mutation_rate:
        # Introduce a small random change
        probe = int((probe + random.uniform(-mutation_strength, mutation_strength)) % total_ports)
    
    # Ensure uniqueness in pi array after mutation
    pi = np.unique(pi)
    if len(pi) < len(individual[0]):
        # If uniqueness reduces the length, refill with random values
        pi = np.append(pi, np.random.choice(total_ports, len(individual[0]) - len(pi), replace=False))
    
    return (pi, probe)
```
