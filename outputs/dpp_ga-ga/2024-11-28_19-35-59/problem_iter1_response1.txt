```python
def mutate_v2(individual: Tuple[np.ndarray, int], total_ports: int) -> Tuple[np.ndarray, int]:
    '''
    Mutates an individual by introducing more sophisticated genetic diversity.

    Args:
        individual (Tuple[np.ndarray, int]): Individual to mutate.
        total_ports (int): Total number of ports.

    Returns:
        Tuple[np.ndarray, int]: Mutated individual.
    '''
    pi, probe = individual
    mutation_rate = 0.1
    mutation_intensity = 0.05  # Additional parameter to control the intensity of mutation

    # Mutate pi array with a mix of random and swap mutations
    for i in range(len(pi)):
        if random.random() < mutation_rate:
            if random.random() < mutation_intensity:
                pi[i] = random.randint(0, total_ports - 1)  # Random mutation
            else:
                swap_index = random.randint(0, len(pi) - 1)  # Swap mutation
                pi[i], pi[swap_index] = pi[swap_index], pi[i]

    # Mutate probe with a random or incremental mutation
    if random.random() < mutation_rate:
        if random.random() < mutation_intensity:
            probe = random.randint(0, total_ports - 1)  # Random mutation
        else:
            probe = (probe + random.randint(1, total_ports // 10)) % total_ports  # Incremental mutation

    return (pi, probe)
```
