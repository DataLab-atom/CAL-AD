```python
import numpy as np
from typing import List, Tuple

def PG_RR_v2(A: List[np.ndarray], y: List[np.ndarray], lambda_: float, gamma: float, num_epochs: int, initial_x: np.ndarray) -> Tuple[np.ndarray]:
    """
    Run the enhanced version of the Proximal Gradient with Random Reshuffling (PG-RR) algorithm.

    Parameters:
        A (List[np.ndarray]): A list of linear transformation matrices.
        y (List[np.ndarray]): A list of observation vectors.
        lambda_ (float): L1 regularization intensity.
        gamma (float): Learning rate (step size).
        num_epochs (int): Number of training cycles.
        initial_x (np.ndarray): Initial solution vector.

    Returns:
        Tuple[np.ndarray]: The last output containing the optimal solution vector.
    """
    x = initial_x.copy()
    n = len(y)
    history = []  # To store the objective function value at each epoch
    
    for epoch in range(num_epochs):
        indices = np.random.permutation(n)
        for i in indices:
            gradient = 2 * A[i].T @ (A[i] @ x - y[i])
            x = soft_thresholding(x - gamma * gradient, gamma * lambda_)
        
        # Store the objective function value for monitoring convergence
        obj_value = objective_function(x, A, y, lambda_)
        history.append(obj_value)
        
        # Adaptive learning rate adjustment
        if epoch > 0 and history[epoch] > history[epoch - 1]:
            gamma *= 0.9  # Reduce learning rate if the objective function increases
    
    return x, history

def objective_function(x: np.ndarray, A: List[np.ndarray], y: List[np.ndarray], lambda_: float) -> float:
    """
    Compute the combined objective function consisting of a smooth term and a non-smooth term.

    Parameters:
        x (np.ndarray): The solution vector.
        A (List[np.ndarray]): A list of linear transformation matrices.
        y (List[np.ndarray]): A list of observation vectors.
        lambda_ (float): L1 regularization intensity.

    Returns:
        float: The value of the objective function.
    """
    smooth_part = sum(np.linalg.norm(A[i] @ x - y[i]) ** 2 for i in range(len(y))) / len(y)
    nonsmooth_part = lambda_ * np.linalg.norm(x, ord=1)
    return smooth_part + nonsmooth_part

def soft_thresholding(x: np.ndarray, threshold: float) -> np.ndarray:
    """
    Apply soft thresholding to the input vector.

    Parameters:
        x (np.ndarray): The input vector.
        threshold (float): The threshold value.

    Returns:
        np.ndarray: The thresholded vector.
    """
    return np.sign(x) * np.maximum(np.abs(x) - threshold, 0)
```
