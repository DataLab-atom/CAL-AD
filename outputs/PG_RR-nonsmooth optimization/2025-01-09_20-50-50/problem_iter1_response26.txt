```python
import numpy as np
from typing import List, Tuple

def PG_RR_v2(A: List[np.ndarray], y: List[np.ndarray], lambda_: float, gamma: float, num_epochs: int, initial_x: np.ndarray) -> Tuple[np.ndarray]:
    """
    Run the entry function of the (PG-RR) algorithm with adaptive learning rate.

    Parameters:
        A (List[np.ndarray]): A list of linear transformation matrices.
        y (List[np.ndarray]): A list of observation vectors.
        lambda_ (float): L1 regularization intensity.
        gamma (float): Initial learning rate (step size).
        num_epochs (int): Number of training cycles.
        initial_x (np.ndarray): Initial solution vector.

    Returns:
        Tuple[np.ndarray]: The last output containing the optimal solution vector.
    """
    x = initial_x.copy()
    n = len(y)
    learning_rate = gamma
    
    for epoch in range(num_epochs):
        # Adaptive learning rate decay
        learning_rate = gamma / (1 + epoch)
        
        # Random reshuffling
        indices = np.random.permutation(n)
        
        for i in indices:
            gradient = 2 * A[i].T @ (A[i] @ x - y[i])
            x = soft_thresholding(x - learning_rate * gradient, learning_rate * lambda_)
    
    return x
```
