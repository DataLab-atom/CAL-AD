[2025-01-25 03:45:36,169][root][INFO] - Workspace: D:\project\xiangmu\AEL-P-SNE(1)\AEL-P-SNE(copy)\outputs\PG_RR-nonsmooth optimization\2025-01-25_03-45-36
[2025-01-25 03:45:36,170][root][INFO] - Project Root: D:\project\xiangmu\AEL-P-SNE(1)\AEL-P-SNE(copy)
[2025-01-25 03:45:36,170][root][INFO] - Using LLM: deepseek-coder
[2025-01-25 03:45:36,171][root][INFO] - Using Algorithm: reevo2d
[2025-01-25 03:45:38,100][root][INFO] - Problem: PG_RR
[2025-01-25 03:45:38,101][root][INFO] - Problem description: Find a point \( x^* \) that minimizes the objective function \( f(x) \). The objective function is defined as:$ \\frac{{1}}{{n}} \\sum_{{i=1}}^{{n}} \\| y_i - A_i x \\|_2^2 + \\lambda \\| x \\|_1 $ where \( A_i \) are definited matrices and \( y_i \) are definited vector. The goal is to determine the optimal point \( x^* \) that achieves the minimum value of this function.
[2025-01-25 03:45:38,103][root][INFO] - Functions name: [soft_thresholding,compute_gradient,PG_RR]
[2025-01-25 03:45:38,107][root][INFO] - Evaluating seed function...
[2025-01-25 03:45:38,107][root][INFO] - Seed function code: 
from dataclasses import dataclass
import torch.nn as nn
import random
from typing import List
from typing import Tuple
import numpy as np
def soft_thresholding(x: np.ndarray, threshold: float) -> np.ndarray:
    """
    Apply soft thresholding to the input vector.

    Parameters:
        x (np.ndarray): The input vector.
        threshold (float): The threshold value.

    Returns:
        np.ndarray: The thresholded vector.
    """
    return np.sign(x) * np.maximum(np.abs(x) - threshold, 0)
def compute_gradient(x: np.ndarray, A: List[np.ndarray], y: List[np.ndarray]) -> np.ndarray:
    """
    Compute the gradient of the smooth part of the objective function.

    Parameters:
        x (np.ndarray): The solution vector.
        A (List[np.ndarray]): A list of linear transformation matrices.
        y (List[np.ndarray]): A list of observation vectors.

    Returns:
        np.ndarray: The gradient vector.
    """
    n = len(y)
    gradient = np.zeros_like(x)
    for i in range(n):
        gradient += 2 * A[i].T @ (A[i] @ x - y[i])
    return gradient / n
def PG_RR(A: List[np.ndarray], y: List[np.ndarray], lambda_: float, gamma: float, num_epochs: int, initial_x: np.ndarray) -> Tuple[np.ndarray]:
    """
    Run the entry function of the (PG-RR) algorithm.

    Parameters:
        A (List[np.ndarray]): A list of linear transformation matrices.
        y (List[np.ndarray]): A list of observation vectors.
        lambda_ (float): L1 regularization intensity.
        gamma (float): Learning rate (step size).
        num_epochs (int): Number of training cycles.
        initial_x (np.ndarray): Initial solution vector.

    Returns:
        Tuple[np.ndarray]: The last output containing the optimal solution vector.
    """
    x = initial_x.copy()
    n = len(y)
    
    for epoch in range(num_epochs):
        for i in np.random.permutation(n):
            gradient = 2 * A[i].T @ (A[i] @ x - y[i])
            x = soft_thresholding(x - gamma * gradient, gamma * lambda_)
    
    return x
[2025-01-25 03:46:00,077][root][INFO] - Iteration 0, response_id 0: Objective value: 0.0077899899864007
[2025-01-25 03:46:00,810][root][INFO] - Iteration 0: Elitist: 0.0077899899864007
[2025-01-25 03:46:00,810][root][INFO] - Iteration 0 finished...
[2025-01-25 03:46:00,811][root][INFO] - Best obj: 0.0077899899864007,Best obj func index: 0, Best Code Path: problem_iter0_code0.py
[2025-01-25 03:46:00,811][root][INFO] - Function Evals: 1
[2025-01-25 03:46:00,812][root][INFO] - Initial Population Prompt: 
System Prompt: 
You are an expert-level algorithm engineer. Your task is to design efficient algorithms that can effectively solve optimization problems.
Your response outputs Python code and nothing else. Format your code as a Python code string: "```python ... ```".

User Prompt: 
There is a Markdown document that contains Python code along with relevant explanations. A target function `soft_thresholding` has been selected from this document.
Write a new `soft_thresholding` for problem:
Find a point \( x^* \) that minimizes the objective function \( f(x) \). The objective function is defined as:$ \\frac{{1}}{{n}} \\sum_{{i=1}}^{{n}} \\| y_i - A_i x \\|_2^2 + \\lambda \\| x \\|_1 $ where \( A_i \) are definited matrices and \( y_i \) are definited vector. The goal is to determine the optimal point \( x^* \) that achieves the minimum value of this function.

Function description:
The `soft_thresholding` function is designed to apply soft thresholding to an input vector, which is crucial in scenarios involving L1 regularization, such as in the context of optimization algorithms. It takes two inputs: `x`, a NumPy ndarray representing the input vector, and `threshold`, a floating-point value that specifies the threshold to be applied. The function returns a NumPy ndarray, which is the thresholded vector, obtained by reducing the absolute values of the elements of `x` by the specified threshold and setting negative values to zero, effectively shrinking small values towards zero while preserving the signs of the larger values. This operation helps to enforce sparsity in solutions, making it particularly valuable in regression problems where L1 regularization is employed.

markdown document:
Below is the implementation of the `PG_RR` algorithm, adhering to the provided optimization goal and coding rules. The code includes comprehensive error handling, efficient performance, and clear documentation. Additionally, it includes type annotations and a test block for verification.

```python
import numpy as np
from typing import List, Tuple

def objective_function(x: np.ndarray, A: List[np.ndarray], y: List[np.ndarray], lambda_: float) -> float:
    """
    Compute the combined objective function consisting of a smooth term and a non-smooth term.

    Parameters:
        x (np.ndarray): The solution vector.
        A (List[np.ndarray]): A list of linear transformation matrices.
        y (List[np.ndarray]): A list of observation vectors.
        lambda_ (float): L1 regularization intensity.

    Returns:
        float: The value of the objective function.
    """
    smooth_part = sum(np.linalg.norm(A[i] @ x - y[i]) ** 2 for i in range(len(y))) / len(y)
    nonsmooth_part = lambda_ * np.linalg.norm(x, ord=1)
    return smooth_part + nonsmooth_part

def soft_thresholding(x: np.ndarray, threshold: float) -> np.ndarray:
    """
    Apply soft thresholding to the input vector.

    Parameters:
        x (np.ndarray): The input vector.
        threshold (float): The threshold value.

    Returns:
        np.ndarray: The thresholded vector.
    """
    return np.sign(x) * np.maximum(np.abs(x) - threshold, 0)

def compute_gradient(x: np.ndarray, A: List[np.ndarray], y: List[np.ndarray]) -> np.ndarray:
    """
    Compute the gradient of the smooth part of the objective function.

    Parameters:
        x (np.ndarray): The solution vector.
        A (List[np.ndarray]): A list of linear transformation matrices.
        y (List[np.ndarray]): A list of observation vectors.

    Returns:
        np.ndarray: The gradient vector.
    """
    n = len(y)
    gradient = np.zeros_like(x)
    for i in range(n):
        gradient += 2 * A[i].T @ (A[i] @ x - y[i])
    return gradient / n

def PG_RR(A: List[np.ndarray], y: List[np.ndarray], lambda_: float, gamma: float, num_epochs: int, initial_x: np.ndarray) -> Tuple[np.ndarray]:
    """
    Run the entry function of the (PG-RR) algorithm.

    Parameters:
        A (List[np.ndarray]): A list of linear transformation matrices.
        y (List[np.ndarray]): A list of observation vectors.
        lambda_ (float): L1 regularization intensity.
        gamma (float): Learning rate (step size).
        num_epochs (int): Number of training cycles.
        initial_x (np.ndarray): Initial solution vector.

    Returns:
        Tuple[np.ndarray]: The last output containing the optimal solution vector.
    """
    x = initial_x.copy()
    n = len(y)
    
    for epoch in range(num_epochs):
        for i in np.random.permutation(n):
            gradient = 2 * A[i].T @ (A[i] @ x - y[i])
            x = soft_thresholding(x - gamma * gradient, gamma * lambda_)
    
    return x

if __name__ == "__main__":
    # Test code
    np.random.seed(42)
    
    # Generate synthetic data
    n_samples = 10
    n_features = 784
    A = [np.random.randn(100, n_features) for _ in range(n_samples)]
    y = [np.random.randn(100) for _ in range(n_samples)]
    lambda_ = 0.1
    gamma = 0.01
    num_epochs = 100
    initial_x = np.random.randn(n_features)
    
    # Run PG_RR algorithm
    optimal_x = PG_RR(A, y, lambda_, gamma, num_epochs, initial_x)
    
    # Compute objective function value
    obj_value = objective_function(optimal_x, A, y, lambda_)
    
    print(f"Optimal solution: {optimal_x}")
    print(f"Objective function value: {obj_value}")
```

### Explanation:
1. **Objective Function**: The `objective_function` computes the combined objective function, which includes the smooth term (average squared Euclidean distance) and the non-smooth term (L1 regularization).

2. **Soft Thresholding**: The `soft_thresholding` function applies the soft thresholding operation, which is crucial for handling the L1 regularization term.

3. **Gradient Computation**: The `compute_gradient` function calculates the gradient of the smooth part of the objective function.

4. **PG_RR Algorithm**: The `PG_RR` function implements the Proximal Gradient with Random Reshuffling (PG-RR) algorithm. It iteratively updates the solution vector `x` using the gradient of the smooth part and applies soft thresholding to handle the L1 regularization.

5. **Test Block**: The test block generates synthetic data, runs the `PG_RR` algorithm, and prints the optimal solution and the objective function value.

This implementation ensures that the code is efficient, well-documented, and adheres to the specified optimization goal.Below is the implementation of the `PG_RR` algorithm, adhering to the provided optimization goal and coding rules. The code includes comprehensive error handling, efficient performance, and clear documentation. Additionally, it includes type annotations and a test block for verification.

```python
import numpy as np
from typing import List, Tuple

def objective_function(x: np.ndarray, A: List[np.ndarray], y: List[np.ndarray], lambda_: float) -> float:
    """
    Compute the combined objective function consisting of a smooth term and a non-smooth term.

    Parameters:
        x (np.ndarray): The solution vector.
        A (List[np.ndarray]): A list of linear transformation matrices.
        y (List[np.ndarray]): A list of observation vectors.
        lambda_ (float): L1 regularization intensity.

    Returns:
        float: The value of the objective function.
    """
    smooth_part = sum(np.linalg.norm(A[i] @ x - y[i]) ** 2 for i in range(len(y))) / len(y)
    nonsmooth_part = lambda_ * np.linalg.norm(x, ord=1)
    return smooth_part + nonsmooth_part

def soft_thresholding(x: np.ndarray, threshold: float) -> np.ndarray:
    """
    Apply soft thresholding to the input vector.

    Parameters:
        x (np.ndarray): The input vector.
        threshold (float): The threshold value.

    Returns:
        np.ndarray: The thresholded vector.
    """
    return np.sign(x) * np.maximum(np.abs(x) - threshold, 0)

def compute_gradient(x: np.ndarray, A: List[np.ndarray], y: List[np.ndarray]) -> np.ndarray:
    """
    Compute the gradient of the smooth part of the objective function.

    Parameters:
        x (np.ndarray): The solution vector.
        A (List[np.ndarray]): A list of linear transformation matrices.
        y (List[np.ndarray]): A list of observation vectors.

    Returns:
        np.ndarray: The gradient vector.
    """
    n = len(y)
    gradient = np.zeros_like(x)
    for i in range(n):
        gradient += 2 * A[i].T @ (A[i] @ x - y[i])
    return gradient / n

def PG_RR(A: List[np.ndarray], y: List[np.ndarray], lambda_: float, gamma: float, num_epochs: int, initial_x: np.ndarray) -> Tuple[np.ndarray]:
    """
    Run the entry function of the (PG-RR) algorithm.

    Parameters:
        A (List[np.ndarray]): A list of linear transformation matrices.
        y (List[np.ndarray]): A list of observation vectors.
        lambda_ (float): L1 regularization intensity.
        gamma (float): Learning rate (step size).
        num_epochs (int): Number of training cycles.
        initial_x (np.ndarray): Initial solution vector.

    Returns:
        Tuple[np.ndarray]: The last output containing the optimal solution vector.
    """
    x = initial_x.copy()
    n = len(y)
    
    for epoch in range(num_epochs):
        for i in np.random.permutation(n):
            gradient = 2 * A[i].T @ (A[i] @ x - y[i])
            x = soft_thresholding(x - gamma * gradient, gamma * lambda_)
    
    return x

if __name__ == "__main__":
    # Test code
    np.random.seed(42)
    
    # Generate synthetic data
    n_samples = 10
    n_features = 784
    A = [np.random.randn(100, n_features) for _ in range(n_samples)]
    y = [np.random.randn(100) for _ in range(n_samples)]
    lambda_ = 0.1
    gamma = 0.01
    num_epochs = 100
    initial_x = np.random.randn(n_features)
    
    # Run PG_RR algorithm
    optimal_x = PG_RR(A, y, lambda_, gamma, num_epochs, initial_x)
    
    # Compute objective function value
    obj_value = objective_function(optimal_x, A, y, lambda_)
    
    print(f"Optimal solution: {optimal_x}")
    print(f"Objective function value: {obj_value}")
```

### Explanation:
1. **Objective Function**: The `objective_function` computes the combined objective function, which includes the smooth term (average squared Euclidean distance) and the non-smooth term (L1 regularization).

2. **Soft Thresholding**: The `soft_thresholding` function applies the soft thresholding operation, which is crucial for handling the L1 regularization term.

3. **Gradient Computation**: The `compute_gradient` function calculates the gradient of the smooth part of the objective function.

4. **PG_RR Algorithm**: The `PG_RR` function implements the Proximal Gradient with Random Reshuffling (PG-RR) algorithm. It iteratively updates the solution vector `x` using the gradient of the smooth part and applies soft thresholding to handle the L1 regularization.

5. **Test Block**: The test block generates synthetic data, runs the `PG_RR` algorithm, and prints the optimal solution and the objective function value.

This implementation ensures that the code is efficient, well-documented, and adheres to the specified optimization goal.

```python
def soft_thresholding(x: np.ndarray, threshold: float) -> np.ndarray:
    """
    Apply soft thresholding to the input vector.

    Parameters:
        x (np.ndarray): The input vector.
        threshold (float): The threshold value.

    Returns:
        np.ndarray: The thresholded vector.
    """
    return np.sign(x) * np.maximum(np.abs(x) - threshold, 0)

```

Refer to the format of a trivial design above. Be very creative and give `soft_thresholding_v2`. Output code only and enclose your code with Python code block: ```python ... ```.


[2025-01-25 03:46:06,497][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:06,712][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:06,747][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:06,837][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:06,946][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:07,004][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:07,233][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:07,236][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:07,245][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:07,432][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:07,478][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:07,980][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:08,343][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:09,128][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:09,874][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:09,877][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:11,341][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:12,116][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:12,242][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:12,465][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:12,521][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:12,980][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:13,368][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:13,452][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:13,530][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:13,590][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:13,635][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:13,654][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:13,820][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:13,830][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:15,495][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:15,658][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:15,813][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:17,760][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:17,800][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:17,949][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:17,996][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:18,489][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:18,764][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:18,829][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:19,078][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:19,185][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:19,230][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:19,605][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:19,664][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:20,166][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:20,332][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:21,094][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:21,569][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:23,533][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:23,575][root][INFO] - Initial Population Prompt: 
System Prompt: 
You are an expert-level algorithm engineer. Your task is to design efficient algorithms that can effectively solve optimization problems.
Your response outputs Python code and nothing else. Format your code as a Python code string: "```python ... ```".

User Prompt: 
There is a Markdown document that contains Python code along with relevant explanations. A target function `compute_gradient` has been selected from this document.
Write a new `compute_gradient` for problem:
Find a point \( x^* \) that minimizes the objective function \( f(x) \). The objective function is defined as:$ \\frac{{1}}{{n}} \\sum_{{i=1}}^{{n}} \\| y_i - A_i x \\|_2^2 + \\lambda \\| x \\|_1 $ where \( A_i \) are definited matrices and \( y_i \) are definited vector. The goal is to determine the optimal point \( x^* \) that achieves the minimum value of this function.

Function description:
The `compute_gradient` function is designed to compute the gradient of the smooth part of an objective function used in optimization problems. It takes three inputs: `x`, which is a numpy array representing the solution vector; `A`, a list of numpy arrays that are linear transformation matrices; and `y`, a list of observation vectors, which represents the target values. The function calculates the gradient by iterating over the matrices and observation vectors, applying the formula for the gradient of the least squares loss, and averaging the contribution from all observations. The output is a numpy array representing the gradient vector, which can be used for optimization algorithms like Proximal Gradient methods to iteratively update the solution vector `x`.

markdown document:
Below is the implementation of the `PG_RR` algorithm, adhering to the provided optimization goal and coding rules. The code includes comprehensive error handling, efficient performance, and clear documentation. Additionally, it includes type annotations and a test block for verification.

```python
import numpy as np
from typing import List, Tuple

def objective_function(x: np.ndarray, A: List[np.ndarray], y: List[np.ndarray], lambda_: float) -> float:
    """
    Compute the combined objective function consisting of a smooth term and a non-smooth term.

    Parameters:
        x (np.ndarray): The solution vector.
        A (List[np.ndarray]): A list of linear transformation matrices.
        y (List[np.ndarray]): A list of observation vectors.
        lambda_ (float): L1 regularization intensity.

    Returns:
        float: The value of the objective function.
    """
    smooth_part = sum(np.linalg.norm(A[i] @ x - y[i]) ** 2 for i in range(len(y))) / len(y)
    nonsmooth_part = lambda_ * np.linalg.norm(x, ord=1)
    return smooth_part + nonsmooth_part

def soft_thresholding(x: np.ndarray, threshold: float) -> np.ndarray:
    """
    Apply soft thresholding to the input vector.

    Parameters:
        x (np.ndarray): The input vector.
        threshold (float): The threshold value.

    Returns:
        np.ndarray: The thresholded vector.
    """
    return np.sign(x) * np.maximum(np.abs(x) - threshold, 0)

def compute_gradient(x: np.ndarray, A: List[np.ndarray], y: List[np.ndarray]) -> np.ndarray:
    """
    Compute the gradient of the smooth part of the objective function.

    Parameters:
        x (np.ndarray): The solution vector.
        A (List[np.ndarray]): A list of linear transformation matrices.
        y (List[np.ndarray]): A list of observation vectors.

    Returns:
        np.ndarray: The gradient vector.
    """
    n = len(y)
    gradient = np.zeros_like(x)
    for i in range(n):
        gradient += 2 * A[i].T @ (A[i] @ x - y[i])
    return gradient / n

def PG_RR(A: List[np.ndarray], y: List[np.ndarray], lambda_: float, gamma: float, num_epochs: int, initial_x: np.ndarray) -> Tuple[np.ndarray]:
    """
    Run the entry function of the (PG-RR) algorithm.

    Parameters:
        A (List[np.ndarray]): A list of linear transformation matrices.
        y (List[np.ndarray]): A list of observation vectors.
        lambda_ (float): L1 regularization intensity.
        gamma (float): Learning rate (step size).
        num_epochs (int): Number of training cycles.
        initial_x (np.ndarray): Initial solution vector.

    Returns:
        Tuple[np.ndarray]: The last output containing the optimal solution vector.
    """
    x = initial_x.copy()
    n = len(y)
    
    for epoch in range(num_epochs):
        for i in np.random.permutation(n):
            gradient = 2 * A[i].T @ (A[i] @ x - y[i])
            x = soft_thresholding(x - gamma * gradient, gamma * lambda_)
    
    return x

if __name__ == "__main__":
    # Test code
    np.random.seed(42)
    
    # Generate synthetic data
    n_samples = 10
    n_features = 784
    A = [np.random.randn(100, n_features) for _ in range(n_samples)]
    y = [np.random.randn(100) for _ in range(n_samples)]
    lambda_ = 0.1
    gamma = 0.01
    num_epochs = 100
    initial_x = np.random.randn(n_features)
    
    # Run PG_RR algorithm
    optimal_x = PG_RR(A, y, lambda_, gamma, num_epochs, initial_x)
    
    # Compute objective function value
    obj_value = objective_function(optimal_x, A, y, lambda_)
    
    print(f"Optimal solution: {optimal_x}")
    print(f"Objective function value: {obj_value}")
```

### Explanation:
1. **Objective Function**: The `objective_function` computes the combined objective function, which includes the smooth term (average squared Euclidean distance) and the non-smooth term (L1 regularization).

2. **Soft Thresholding**: The `soft_thresholding` function applies the soft thresholding operation, which is crucial for handling the L1 regularization term.

3. **Gradient Computation**: The `compute_gradient` function calculates the gradient of the smooth part of the objective function.

4. **PG_RR Algorithm**: The `PG_RR` function implements the Proximal Gradient with Random Reshuffling (PG-RR) algorithm. It iteratively updates the solution vector `x` using the gradient of the smooth part and applies soft thresholding to handle the L1 regularization.

5. **Test Block**: The test block generates synthetic data, runs the `PG_RR` algorithm, and prints the optimal solution and the objective function value.

This implementation ensures that the code is efficient, well-documented, and adheres to the specified optimization goal.Below is the implementation of the `PG_RR` algorithm, adhering to the provided optimization goal and coding rules. The code includes comprehensive error handling, efficient performance, and clear documentation. Additionally, it includes type annotations and a test block for verification.

```python
import numpy as np
from typing import List, Tuple

def objective_function(x: np.ndarray, A: List[np.ndarray], y: List[np.ndarray], lambda_: float) -> float:
    """
    Compute the combined objective function consisting of a smooth term and a non-smooth term.

    Parameters:
        x (np.ndarray): The solution vector.
        A (List[np.ndarray]): A list of linear transformation matrices.
        y (List[np.ndarray]): A list of observation vectors.
        lambda_ (float): L1 regularization intensity.

    Returns:
        float: The value of the objective function.
    """
    smooth_part = sum(np.linalg.norm(A[i] @ x - y[i]) ** 2 for i in range(len(y))) / len(y)
    nonsmooth_part = lambda_ * np.linalg.norm(x, ord=1)
    return smooth_part + nonsmooth_part

def soft_thresholding(x: np.ndarray, threshold: float) -> np.ndarray:
    """
    Apply soft thresholding to the input vector.

    Parameters:
        x (np.ndarray): The input vector.
        threshold (float): The threshold value.

    Returns:
        np.ndarray: The thresholded vector.
    """
    return np.sign(x) * np.maximum(np.abs(x) - threshold, 0)

def compute_gradient(x: np.ndarray, A: List[np.ndarray], y: List[np.ndarray]) -> np.ndarray:
    """
    Compute the gradient of the smooth part of the objective function.

    Parameters:
        x (np.ndarray): The solution vector.
        A (List[np.ndarray]): A list of linear transformation matrices.
        y (List[np.ndarray]): A list of observation vectors.

    Returns:
        np.ndarray: The gradient vector.
    """
    n = len(y)
    gradient = np.zeros_like(x)
    for i in range(n):
        gradient += 2 * A[i].T @ (A[i] @ x - y[i])
    return gradient / n

def PG_RR(A: List[np.ndarray], y: List[np.ndarray], lambda_: float, gamma: float, num_epochs: int, initial_x: np.ndarray) -> Tuple[np.ndarray]:
    """
    Run the entry function of the (PG-RR) algorithm.

    Parameters:
        A (List[np.ndarray]): A list of linear transformation matrices.
        y (List[np.ndarray]): A list of observation vectors.
        lambda_ (float): L1 regularization intensity.
        gamma (float): Learning rate (step size).
        num_epochs (int): Number of training cycles.
        initial_x (np.ndarray): Initial solution vector.

    Returns:
        Tuple[np.ndarray]: The last output containing the optimal solution vector.
    """
    x = initial_x.copy()
    n = len(y)
    
    for epoch in range(num_epochs):
        for i in np.random.permutation(n):
            gradient = 2 * A[i].T @ (A[i] @ x - y[i])
            x = soft_thresholding(x - gamma * gradient, gamma * lambda_)
    
    return x

if __name__ == "__main__":
    # Test code
    np.random.seed(42)
    
    # Generate synthetic data
    n_samples = 10
    n_features = 784
    A = [np.random.randn(100, n_features) for _ in range(n_samples)]
    y = [np.random.randn(100) for _ in range(n_samples)]
    lambda_ = 0.1
    gamma = 0.01
    num_epochs = 100
    initial_x = np.random.randn(n_features)
    
    # Run PG_RR algorithm
    optimal_x = PG_RR(A, y, lambda_, gamma, num_epochs, initial_x)
    
    # Compute objective function value
    obj_value = objective_function(optimal_x, A, y, lambda_)
    
    print(f"Optimal solution: {optimal_x}")
    print(f"Objective function value: {obj_value}")
```

### Explanation:
1. **Objective Function**: The `objective_function` computes the combined objective function, which includes the smooth term (average squared Euclidean distance) and the non-smooth term (L1 regularization).

2. **Soft Thresholding**: The `soft_thresholding` function applies the soft thresholding operation, which is crucial for handling the L1 regularization term.

3. **Gradient Computation**: The `compute_gradient` function calculates the gradient of the smooth part of the objective function.

4. **PG_RR Algorithm**: The `PG_RR` function implements the Proximal Gradient with Random Reshuffling (PG-RR) algorithm. It iteratively updates the solution vector `x` using the gradient of the smooth part and applies soft thresholding to handle the L1 regularization.

5. **Test Block**: The test block generates synthetic data, runs the `PG_RR` algorithm, and prints the optimal solution and the objective function value.

This implementation ensures that the code is efficient, well-documented, and adheres to the specified optimization goal.

```python
def compute_gradient(x: np.ndarray, A: List[np.ndarray], y: List[np.ndarray]) -> np.ndarray:
    """
    Compute the gradient of the smooth part of the objective function.

    Parameters:
        x (np.ndarray): The solution vector.
        A (List[np.ndarray]): A list of linear transformation matrices.
        y (List[np.ndarray]): A list of observation vectors.

    Returns:
        np.ndarray: The gradient vector.
    """
    n = len(y)
    gradient = np.zeros_like(x)
    for i in range(n):
        gradient += 2 * A[i].T @ (A[i] @ x - y[i])
    return gradient / n

```

Refer to the format of a trivial design above. Be very creative and give `compute_gradient_v2`. Output code only and enclose your code with Python code block: ```python ... ```.


[2025-01-25 03:46:30,036][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:30,881][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:32,136][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:32,443][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:32,943][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:32,947][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:32,981][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:33,048][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:33,387][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:33,671][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:34,562][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:35,231][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:35,464][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:35,661][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:36,357][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:36,813][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:39,930][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:40,513][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:41,445][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:43,020][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:43,462][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:44,506][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:45,177][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:46,786][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:47,902][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:48,518][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:49,294][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:49,394][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:49,728][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:50,564][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:50,582][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:50,667][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:50,834][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:50,939][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:51,440][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:51,897][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:52,878][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:53,618][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:53,666][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:55,207][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:56,085][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:57,833][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:58,656][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:59,019][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:59,180][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:59,760][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:59,763][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:46:59,918][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:47:00,132][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:47:00,715][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:47:00,759][root][INFO] - Initial Population Prompt: 
System Prompt: 
You are an expert-level algorithm engineer. Your task is to design efficient algorithms that can effectively solve optimization problems.
Your response outputs Python code and nothing else. Format your code as a Python code string: "```python ... ```".

User Prompt: 
There is a Markdown document that contains Python code along with relevant explanations. A target function `PG_RR` has been selected from this document.
Write a new `PG_RR` for problem:
Find a point \( x^* \) that minimizes the objective function \( f(x) \). The objective function is defined as:$ \\frac{{1}}{{n}} \\sum_{{i=1}}^{{n}} \\| y_i - A_i x \\|_2^2 + \\lambda \\| x \\|_1 $ where \( A_i \) are definited matrices and \( y_i \) are definited vector. The goal is to determine the optimal point \( x^* \) that achieves the minimum value of this function.

Function description:
The `PG_RR` function implements the Proximal Gradient with Random Reshuffling (PG-RR) optimization algorithm, designed to minimize a composite objective function that includes a smooth term and an L1 regularization term. Its inputs consist of a list of linear transformation matrices `A`, a list of observation vectors `y`, a regularization intensity `lambda_`, a learning rate `gamma`, the number of training epochs `num_epochs`, and an initial solution vector `initial_x`. The function outputs a tuple containing the optimal solution vector after iteratively updating it through gradient descent and soft thresholding. The purpose of this function is to find a solution that balances the fidelity to the observations with a penalty for complexity (sparsity) in the solution, making it useful in various machine learning and statistical modeling applications.

markdown document:
Below is the implementation of the `PG_RR` algorithm, adhering to the provided optimization goal and coding rules. The code includes comprehensive error handling, efficient performance, and clear documentation. Additionally, it includes type annotations and a test block for verification.

```python
import numpy as np
from typing import List, Tuple

def objective_function(x: np.ndarray, A: List[np.ndarray], y: List[np.ndarray], lambda_: float) -> float:
    """
    Compute the combined objective function consisting of a smooth term and a non-smooth term.

    Parameters:
        x (np.ndarray): The solution vector.
        A (List[np.ndarray]): A list of linear transformation matrices.
        y (List[np.ndarray]): A list of observation vectors.
        lambda_ (float): L1 regularization intensity.

    Returns:
        float: The value of the objective function.
    """
    smooth_part = sum(np.linalg.norm(A[i] @ x - y[i]) ** 2 for i in range(len(y))) / len(y)
    nonsmooth_part = lambda_ * np.linalg.norm(x, ord=1)
    return smooth_part + nonsmooth_part

def soft_thresholding(x: np.ndarray, threshold: float) -> np.ndarray:
    """
    Apply soft thresholding to the input vector.

    Parameters:
        x (np.ndarray): The input vector.
        threshold (float): The threshold value.

    Returns:
        np.ndarray: The thresholded vector.
    """
    return np.sign(x) * np.maximum(np.abs(x) - threshold, 0)

def compute_gradient(x: np.ndarray, A: List[np.ndarray], y: List[np.ndarray]) -> np.ndarray:
    """
    Compute the gradient of the smooth part of the objective function.

    Parameters:
        x (np.ndarray): The solution vector.
        A (List[np.ndarray]): A list of linear transformation matrices.
        y (List[np.ndarray]): A list of observation vectors.

    Returns:
        np.ndarray: The gradient vector.
    """
    n = len(y)
    gradient = np.zeros_like(x)
    for i in range(n):
        gradient += 2 * A[i].T @ (A[i] @ x - y[i])
    return gradient / n

def PG_RR(A: List[np.ndarray], y: List[np.ndarray], lambda_: float, gamma: float, num_epochs: int, initial_x: np.ndarray) -> Tuple[np.ndarray]:
    """
    Run the entry function of the (PG-RR) algorithm.

    Parameters:
        A (List[np.ndarray]): A list of linear transformation matrices.
        y (List[np.ndarray]): A list of observation vectors.
        lambda_ (float): L1 regularization intensity.
        gamma (float): Learning rate (step size).
        num_epochs (int): Number of training cycles.
        initial_x (np.ndarray): Initial solution vector.

    Returns:
        Tuple[np.ndarray]: The last output containing the optimal solution vector.
    """
    x = initial_x.copy()
    n = len(y)
    
    for epoch in range(num_epochs):
        for i in np.random.permutation(n):
            gradient = 2 * A[i].T @ (A[i] @ x - y[i])
            x = soft_thresholding(x - gamma * gradient, gamma * lambda_)
    
    return x

if __name__ == "__main__":
    # Test code
    np.random.seed(42)
    
    # Generate synthetic data
    n_samples = 10
    n_features = 784
    A = [np.random.randn(100, n_features) for _ in range(n_samples)]
    y = [np.random.randn(100) for _ in range(n_samples)]
    lambda_ = 0.1
    gamma = 0.01
    num_epochs = 100
    initial_x = np.random.randn(n_features)
    
    # Run PG_RR algorithm
    optimal_x = PG_RR(A, y, lambda_, gamma, num_epochs, initial_x)
    
    # Compute objective function value
    obj_value = objective_function(optimal_x, A, y, lambda_)
    
    print(f"Optimal solution: {optimal_x}")
    print(f"Objective function value: {obj_value}")
```

### Explanation:
1. **Objective Function**: The `objective_function` computes the combined objective function, which includes the smooth term (average squared Euclidean distance) and the non-smooth term (L1 regularization).

2. **Soft Thresholding**: The `soft_thresholding` function applies the soft thresholding operation, which is crucial for handling the L1 regularization term.

3. **Gradient Computation**: The `compute_gradient` function calculates the gradient of the smooth part of the objective function.

4. **PG_RR Algorithm**: The `PG_RR` function implements the Proximal Gradient with Random Reshuffling (PG-RR) algorithm. It iteratively updates the solution vector `x` using the gradient of the smooth part and applies soft thresholding to handle the L1 regularization.

5. **Test Block**: The test block generates synthetic data, runs the `PG_RR` algorithm, and prints the optimal solution and the objective function value.

This implementation ensures that the code is efficient, well-documented, and adheres to the specified optimization goal.Below is the implementation of the `PG_RR` algorithm, adhering to the provided optimization goal and coding rules. The code includes comprehensive error handling, efficient performance, and clear documentation. Additionally, it includes type annotations and a test block for verification.

```python
import numpy as np
from typing import List, Tuple

def objective_function(x: np.ndarray, A: List[np.ndarray], y: List[np.ndarray], lambda_: float) -> float:
    """
    Compute the combined objective function consisting of a smooth term and a non-smooth term.

    Parameters:
        x (np.ndarray): The solution vector.
        A (List[np.ndarray]): A list of linear transformation matrices.
        y (List[np.ndarray]): A list of observation vectors.
        lambda_ (float): L1 regularization intensity.

    Returns:
        float: The value of the objective function.
    """
    smooth_part = sum(np.linalg.norm(A[i] @ x - y[i]) ** 2 for i in range(len(y))) / len(y)
    nonsmooth_part = lambda_ * np.linalg.norm(x, ord=1)
    return smooth_part + nonsmooth_part

def soft_thresholding(x: np.ndarray, threshold: float) -> np.ndarray:
    """
    Apply soft thresholding to the input vector.

    Parameters:
        x (np.ndarray): The input vector.
        threshold (float): The threshold value.

    Returns:
        np.ndarray: The thresholded vector.
    """
    return np.sign(x) * np.maximum(np.abs(x) - threshold, 0)

def compute_gradient(x: np.ndarray, A: List[np.ndarray], y: List[np.ndarray]) -> np.ndarray:
    """
    Compute the gradient of the smooth part of the objective function.

    Parameters:
        x (np.ndarray): The solution vector.
        A (List[np.ndarray]): A list of linear transformation matrices.
        y (List[np.ndarray]): A list of observation vectors.

    Returns:
        np.ndarray: The gradient vector.
    """
    n = len(y)
    gradient = np.zeros_like(x)
    for i in range(n):
        gradient += 2 * A[i].T @ (A[i] @ x - y[i])
    return gradient / n

def PG_RR(A: List[np.ndarray], y: List[np.ndarray], lambda_: float, gamma: float, num_epochs: int, initial_x: np.ndarray) -> Tuple[np.ndarray]:
    """
    Run the entry function of the (PG-RR) algorithm.

    Parameters:
        A (List[np.ndarray]): A list of linear transformation matrices.
        y (List[np.ndarray]): A list of observation vectors.
        lambda_ (float): L1 regularization intensity.
        gamma (float): Learning rate (step size).
        num_epochs (int): Number of training cycles.
        initial_x (np.ndarray): Initial solution vector.

    Returns:
        Tuple[np.ndarray]: The last output containing the optimal solution vector.
    """
    x = initial_x.copy()
    n = len(y)
    
    for epoch in range(num_epochs):
        for i in np.random.permutation(n):
            gradient = 2 * A[i].T @ (A[i] @ x - y[i])
            x = soft_thresholding(x - gamma * gradient, gamma * lambda_)
    
    return x

if __name__ == "__main__":
    # Test code
    np.random.seed(42)
    
    # Generate synthetic data
    n_samples = 10
    n_features = 784
    A = [np.random.randn(100, n_features) for _ in range(n_samples)]
    y = [np.random.randn(100) for _ in range(n_samples)]
    lambda_ = 0.1
    gamma = 0.01
    num_epochs = 100
    initial_x = np.random.randn(n_features)
    
    # Run PG_RR algorithm
    optimal_x = PG_RR(A, y, lambda_, gamma, num_epochs, initial_x)
    
    # Compute objective function value
    obj_value = objective_function(optimal_x, A, y, lambda_)
    
    print(f"Optimal solution: {optimal_x}")
    print(f"Objective function value: {obj_value}")
```

### Explanation:
1. **Objective Function**: The `objective_function` computes the combined objective function, which includes the smooth term (average squared Euclidean distance) and the non-smooth term (L1 regularization).

2. **Soft Thresholding**: The `soft_thresholding` function applies the soft thresholding operation, which is crucial for handling the L1 regularization term.

3. **Gradient Computation**: The `compute_gradient` function calculates the gradient of the smooth part of the objective function.

4. **PG_RR Algorithm**: The `PG_RR` function implements the Proximal Gradient with Random Reshuffling (PG-RR) algorithm. It iteratively updates the solution vector `x` using the gradient of the smooth part and applies soft thresholding to handle the L1 regularization.

5. **Test Block**: The test block generates synthetic data, runs the `PG_RR` algorithm, and prints the optimal solution and the objective function value.

This implementation ensures that the code is efficient, well-documented, and adheres to the specified optimization goal.

```python
def PG_RR(A: List[np.ndarray], y: List[np.ndarray], lambda_: float, gamma: float, num_epochs: int, initial_x: np.ndarray) -> Tuple[np.ndarray]:
    """
    Run the entry function of the (PG-RR) algorithm.

    Parameters:
        A (List[np.ndarray]): A list of linear transformation matrices.
        y (List[np.ndarray]): A list of observation vectors.
        lambda_ (float): L1 regularization intensity.
        gamma (float): Learning rate (step size).
        num_epochs (int): Number of training cycles.
        initial_x (np.ndarray): Initial solution vector.

    Returns:
        Tuple[np.ndarray]: The last output containing the optimal solution vector.
    """
    x = initial_x.copy()
    n = len(y)
    
    for epoch in range(num_epochs):
        for i in np.random.permutation(n):
            gradient = 2 * A[i].T @ (A[i] @ x - y[i])
            x = soft_thresholding(x - gamma * gradient, gamma * lambda_)
    
    return x

```

Refer to the format of a trivial design above. Be very creative and give `PG_RR_v2`. Output code only and enclose your code with Python code block: ```python ... ```.


[2025-01-25 03:47:10,206][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:47:10,469][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:47:10,923][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:47:11,639][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:47:11,640][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:47:11,641][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:47:11,736][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:47:12,123][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:47:12,357][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:47:12,423][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:47:12,781][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:47:12,834][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:47:13,471][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:47:13,494][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:47:14,027][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:47:20,053][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:47:21,076][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:47:21,164][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:47:21,191][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:47:21,843][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:47:21,889][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:47:22,003][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:47:22,047][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:47:22,229][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:47:22,311][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:47:22,312][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:47:22,660][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:47:23,351][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:47:23,658][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:47:23,659][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:47:24,924][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:47:30,014][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:47:30,531][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:47:31,413][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:47:31,499][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:47:31,728][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:47:31,909][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:47:32,030][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:47:32,317][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:47:32,391][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:47:32,733][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:47:33,391][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:47:33,673][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:47:33,783][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:47:34,736][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:47:34,854][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:47:36,642][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:47:39,822][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:47:40,734][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:47:41,833][httpx][INFO] - HTTP Request: POST https://api.agicto.cn/v1/chat/completions "HTTP/1.1 200 OK"
[2025-01-25 03:48:12,346][root][INFO] - Iteration 1, response_id 0: Objective value: 0.0077899899864007
[2025-01-25 03:48:14,397][root][INFO] - Iteration 1, response_id 1: Objective value: 0.007789982663563679
[2025-01-25 03:48:39,774][root][INFO] - Iteration 1, response_id 2: Objective value: 0.0077899899864007
