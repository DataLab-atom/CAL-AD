def compute_gradient(x: np.ndarray, A: List[np.ndarray], y: List[np.ndarray]) -> np.ndarray:
    """
    Compute the gradient of the smooth part of the objective function using vectorized operations.

    Parameters:
        x (np.ndarray): The solution vector.
        A (List[np.ndarray]): A list of linear transformation matrices.
        y (List[np.ndarray]): A list of observation vectors.

    Returns:
        np.ndarray: The gradient vector.
    """
    n = len(y)
    # Stack all A_i matrices and y_i vectors into a single 3D array and 2D array respectively
    A_stacked = np.stack(A)
    y_stacked = np.stack(y)
    
    # Compute the residuals (A_i @ x - y_i) for all i in a vectorized manner
    residuals = np.einsum('ijk,k->ij', A_stacked, x) - y_stacked
    
    # Compute the gradient contributions for all i in a vectorized manner
    gradient_contributions = np.einsum('ijk,ij->k', A_stacked, residuals)
    
    # Average the contributions and multiply by 2
    gradient = 2 * gradient_contributions / n
    
    return gradient
