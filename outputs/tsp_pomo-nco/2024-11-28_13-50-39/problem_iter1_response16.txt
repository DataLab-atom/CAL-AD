```python
def _run_episode_v2(env: Env, model: Model, batch_size: int, aug_factor: int) -> float:
    """
    Runs a single enhanced episode of the TSP problem with improved selection strategy.

    Args:
        env: The TSP environment.
        model: The pre-trained TSP model.
        batch_size: The batch size for processing problems.
        aug_factor: Augmentation factor for data.

    Returns:
        The minimum travel distance found in the episode.
    """
    env.load_problems(batch_size, aug_factor)
    reset_state, _, _ = env.reset()
    model.pre_forward(reset_state)

    total_reward = 0
    done = False
    visited = set()
    current_state = reset_state

    while not done:
        state, _, _ = env.pre_step()
        selected, action_probs = model.forward(state)

        # Implementing a more sophisticated action selection
        # Choose action based on maximum probability but ensure it's not already visited
        while selected in visited:
            action_probs[0][selected] = -float('inf')  # Invalidate already visited
            selected = torch.argmax(action_probs).item()

        # Mark the selected node as visited
        visited.add(selected)

        # Execute the action in the environment
        step_state, reward, done = env.step(selected)
        total_reward += reward.item()

    return -total_reward  # negative reward represents the total travel distance
```
