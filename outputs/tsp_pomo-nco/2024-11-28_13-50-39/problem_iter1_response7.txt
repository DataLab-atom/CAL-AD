```python
def _run_episode_v2(env: Env, model: Model, batch_size: int, aug_factor: int) -> float:
    """
    Runs a single episode of the TSP problem with enhanced exploration strategy.

    Args:
        env: The TSP environment.
        model: The pre-trained TSP model.
        batch_size: The batch size for processing problems.
        aug_factor: Augmentation factor for data.

    Returns:
        The minimum travel distance found in the episode.
    """
    env.load_problems(batch_size, aug_factor)
    reset_state, _, _ = env.reset()
    model.pre_forward(reset_state)

    done = False
    total_reward = 0

    while not done:
        state, _, _ = env.pre_step()
        selected, _ = model.forward(state)

        # Introducing a stochastic element to encourage exploration
        if np.random.rand() < 0.1:  # 10% chance to explore
            selected = np.random.choice(env.get_available_actions())

        step_state, reward, done = env.step(selected)
        total_reward += reward

    return -total_reward  # reward is negative distance
```
