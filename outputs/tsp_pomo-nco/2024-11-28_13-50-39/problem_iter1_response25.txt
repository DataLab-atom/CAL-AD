```python
def _run_episode_v2(env: Env, model: Model, batch_size: int, aug_factor: int) -> float:
    """
    Runs a single episode of the TSP problem with enhanced heuristics.

    Args:
        env: The TSP environment.
        model: The pre-trained TSP model.
        batch_size: The batch size for processing problems.
        aug_factor: Augmentation factor for data.

    Returns:
        The minimum travel distance found in the episode.
    """
    # Load problems into the environment
    env.load_problems(batch_size, aug_factor)
    reset_state, _, _ = env.reset()
    model.pre_forward(reset_state)

    total_reward = 0
    done = False
    path_taken = []

    while not done:
        state, _, _ = env.pre_step()
        
        # Use the model to select the next action
        selected, _ = model.forward(state)
        
        # Store the selected action as part of the path
        path_taken.append(selected.item())
        
        # Step through the environment
        step_state, reward, done = env.step(selected)
        total_reward += reward.item()  # Accumulate the reward (negative distance)

    min_travel_distance = -total_reward  # Convert total negative reward to distance
    print(f"Path taken: {path_taken}, Minimum distance: {min_travel_distance}")
    return min_travel_distance
```
