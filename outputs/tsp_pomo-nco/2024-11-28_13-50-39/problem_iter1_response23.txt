```python
def _run_episode_v2(env: Env, model: Model, batch_size: int, aug_factor: int) -> float:
    """
    Runs a single episode of the TSP problem with enhanced heuristics and tracking.

    Args:
        env: The TSP environment.
        model: The pre-trained TSP model.
        batch_size: The batch size for processing problems.
        aug_factor: Augmentation factor for data.

    Returns:
        The minimum travel distance found in the episode.
    """
    # Load problems into the environment
    env.load_problems(batch_size, aug_factor)
    
    # Reset the environment to get the initial state
    reset_state, _, _ = env.reset()
    model.pre_forward(reset_state)

    total_reward = 0
    steps = 0
    done = False

    # Run until the episode is done
    while not done:
        # Preprocess the current state
        state, _, _ = env.pre_step()
        
        # Use the model to select the next action based on the current state
        selected, action_probs = model.forward(state)

        # Take a step in the environment based on the selected action
        step_state, reward, done = env.step(selected)

        # Accumulate the total reward (negative distance)
        total_reward += reward.item()
        steps += 1

    # Return the negative of the total reward as the total travel distance
    return -total_reward / steps  # Average travel distance per step
```
