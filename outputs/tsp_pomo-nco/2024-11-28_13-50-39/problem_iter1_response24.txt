```python
def _run_episode_v2(env: Env, model: Model, batch_size: int, aug_factor: int) -> float:
    """
    Runs a single episode of the TSP problem with enhanced state management and logging.

    Args:
        env: The TSP environment.
        model: The pre-trained TSP model.
        batch_size: The batch size for processing problems.
        aug_factor: Augmentation factor for data.

    Returns:
        The minimum travel distance found in the episode.
    """
    env.load_problems(batch_size, aug_factor)
    reset_state, _, _ = env.reset()
    model.pre_forward(reset_state)

    total_reward = 0
    done = False
    step_count = 0

    while not done:
        state, _, _ = env.pre_step()
        selected, logits = model.forward(state)
        step_state, reward, done = env.step(selected)
        
        total_reward += reward.sum().item()
        step_count += 1

        # Optional: Log the selected actions and current rewards
        print(f"Step {step_count}: Selected actions: {selected}, Reward: {reward}")

    # Return the negative of the total reward as the minimum distance
    return -total_reward  # Assuming reward is negative distance
```
