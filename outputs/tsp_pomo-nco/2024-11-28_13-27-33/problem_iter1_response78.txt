```python
def _run_episode_v2(env: Env, model: Model, batch_size: int, aug_factor: int) -> float:
    """
    Runs a single episode of the TSP problem with additional heuristics.

    Args:
        env: The TSP environment.
        model: The pre-trained TSP model.
        batch_size: The batch size for processing problems.
        aug_factor: Augmentation factor for data.

    Returns:
        The minimum travel distance found in the episode.
    """
    env.load_problems(batch_size, aug_factor)
    reset_state, _, _ = env.reset()
    model.pre_forward(reset_state)

    done = False
    total_rewards = []
    while not done:
        state, _, _ = env.pre_step()
        selected, _ = model.forward(state)
        
        # Apply heuristic: Nearest Neighbor
        if len(state) > 1:
            distances = torch.cdist(state, state)
            nearest_neighbor = torch.argmin(distances[selected[-1]], dim=0)
            selected = torch.cat((selected, nearest_neighbor.unsqueeze(0)))
        
        step_state, reward, done = env.step(selected)
        total_rewards.append(reward)

    return -torch.stack(total_rewards).min().item()  # reward is negative distance
```
