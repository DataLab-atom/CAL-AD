```python
def _run_episode_v2(env: Env, model: Model, batch_size: int, aug_factor: int) -> float:
    """
    Runs a single episode of the TSP problem with additional heuristics.

    Args:
        env: The TSP environment.
        model: The pre-trained TSP model.
        batch_size: The batch size for processing problems.
        aug_factor: Augmentation factor for data.

    Returns:
        The minimum travel distance found in the episode.
    """
    env.load_problems(batch_size, aug_factor)
    reset_state, _, _ = env.reset()
    model.pre_forward(reset_state)

    done = False
    while not done:
        state, _, _ = env.pre_step()
        
        # Apply heuristic: Nearest Neighbor
        if np.random.rand() < 0.5:  # 50% chance to use heuristic
            distances = torch.cdist(state, state)
            nearest_neighbor = distances.argmin(dim=1)
            selected = nearest_neighbor
        else:
            selected, _ = model.forward(state)
        
        step_state, reward, done = env.step(selected)

    return -reward.min().item()  # reward is negative distance
```
