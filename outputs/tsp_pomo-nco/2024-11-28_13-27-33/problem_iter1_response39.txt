```python
def _run_episode_v2(env: Env, model: Model, batch_size: int, aug_factor: int) -> float:
    """
    Runs a single episode of the TSP problem with additional heuristics.

    Args:
        env: The TSP environment.
        model: The pre-trained TSP model.
        batch_size: The batch size for processing problems.
        aug_factor: Augmentation factor for data.

    Returns:
        The minimum travel distance found in the episode.
    """
    env.load_problems(batch_size, aug_factor)
    reset_state, _, _ = env.reset()
    model.pre_forward(reset_state)

    done = False
    min_distance = float('inf')
    current_path = []

    while not done:
        state, _, _ = env.pre_step()
        selected, _ = model.forward(state)
        step_state, reward, done = env.step(selected)

        # Update the current path
        current_path.append(selected)

        # Calculate the current distance
        current_distance = -reward.item()

        # Apply a simple heuristic: if the current distance exceeds the minimum found so far, break early
        if current_distance > min_distance:
            break

        # Update the minimum distance
        min_distance = min(min_distance, current_distance)

    # Apply a post-processing heuristic: try to swap nodes to see if it reduces the distance
    for i in range(len(current_path)):
        for j in range(i + 1, len(current_path)):
            # Swap nodes i and j
            current_path[i], current_path[j] = current_path[j], current_path[i]
            # Recalculate the distance
            new_distance = env.calculate_distance(current_path)
            # Update the minimum distance if the new distance is smaller
            if new_distance < min_distance:
                min_distance = new_distance
            else:
                # Swap back if it doesn't improve
                current_path[i], current_path[j] = current_path[j], current_path[i]

    return min_distance
```
