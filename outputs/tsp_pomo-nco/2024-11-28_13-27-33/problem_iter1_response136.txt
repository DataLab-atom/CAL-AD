```python
def _run_episode_v2(env: Env, model: Model, batch_size: int, aug_factor: int) -> float:
    """
    Runs a single episode of the TSP problem with additional heuristics.

    Args:
        env: The TSP environment.
        model: The pre-trained TSP model.
        batch_size: The batch size for processing problems.
        aug_factor: Augmentation factor for data.

    Returns:
        The minimum travel distance found in the episode.
    """
    env.load_problems(batch_size, aug_factor)
    reset_state, _, _ = env.reset()
    model.pre_forward(reset_state)

    done = False
    while not done:
        state, _, _ = env.pre_step()
        
        # Apply heuristic: Nearest Neighbor
        if np.random.rand() < 0.5:
            selected = nearest_neighbor_heuristic(state)
        else:
            selected, _ = model.forward(state)
        
        step_state, reward, done = env.step(selected)

    return -reward.min().item()  # reward is negative distance

def nearest_neighbor_heuristic(state: torch.Tensor) -> torch.Tensor:
    """
    Simple heuristic to select the nearest neighbor.

    Args:
        state: The current state of the environment.

    Returns:
        The selected action based on the nearest neighbor heuristic.
    """
    distances = torch.cdist(state, state)
    min_dist_indices = torch.argmin(distances, dim=1)
    return min_dist_indices
```
