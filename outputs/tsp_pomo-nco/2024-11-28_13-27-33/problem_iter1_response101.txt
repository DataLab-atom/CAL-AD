```python
def _run_episode_v2(env: Env, model: Model, batch_size: int, aug_factor: int) -> float:
    """
    Runs a single episode of the TSP problem with additional heuristics.

    Args:
        env: The TSP environment.
        model: The pre-trained TSP model.
        batch_size: The batch size for processing problems.
        aug_factor: Augmentation factor for data.

    Returns:
        The minimum travel distance found in the episode.
    """
    env.load_problems(batch_size, aug_factor)
    reset_state, _, _ = env.reset()
    model.pre_forward(reset_state)

    done = False
    while not done:
        state, _, _ = env.pre_step()
        
        # Apply heuristics: Nearest Neighbor and 2-opt
        nn_selected = nearest_neighbor_heuristic(state)
        two_opt_selected = two_opt_heuristic(state)
        
        # Combine heuristics with model's selection
        combined_selected = model.forward(state, nn_selected, two_opt_selected)
        
        step_state, reward, done = env.step(combined_selected)

    return -reward.min().item()  # reward is negative distance

def nearest_neighbor_heuristic(state):
    """
    Simple heuristic to select the nearest neighbor.
    """
    distances = torch.cdist(state, state)
    nn_selected = torch.argmin(distances, dim=1)
    return nn_selected

def two_opt_heuristic(state):
    """
    Simple 2-opt heuristic to improve the tour.
    """
    def swap_2opt(route, i, k):
        new_route = torch.cat((route[:i], route[i:k+1].flip(0), route[k+1:]))
        return new_route

    route = torch.arange(state.size(0))
    improved = True
    while improved:
        improved = False
        for i in range(1, len(route) - 2):
            for k in range(i + 1, len(route)):
                if k - i == 1: continue
                new_route = swap_2opt(route, i, k)
                if tour_length(new_route, state) < tour_length(route, state):
                    route = new_route
                    improved = True
    return route

def tour_length(route, state):
    """
    Calculate the total length of the tour.
    """
    indices = torch.cat((route, route[0].unsqueeze(0)))
    return torch.sum(torch.norm(state[indices[:-1]] - state[indices[1:]], dim=1))
```
