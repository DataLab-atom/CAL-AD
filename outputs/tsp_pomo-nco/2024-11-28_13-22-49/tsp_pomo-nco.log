[2024-11-28 13:22:49,583][root][INFO] - Workspace: E:\all_works\iclr2025\AEL-P-SNE(1)\AEL-P-SNE\outputs\tsp_pomo-nco\2024-11-28_13-22-49
[2024-11-28 13:22:49,583][root][INFO] - Project Root: E:\all_works\iclr2025\AEL-P-SNE(1)\AEL-P-SNE
[2024-11-28 13:22:49,584][root][INFO] - Using LLM: deepseek-coder
[2024-11-28 13:22:49,584][root][INFO] - Using Algorithm: reevo2d
[2024-11-28 13:22:51,952][root][INFO] - Problem: tsp_pomo
[2024-11-28 13:22:51,952][root][INFO] - Problem description: Assisting in solving the Traveling Salesman Problem (TSP) with some prior heuristics. TSP requires finding the shortest path that visits all given nodes and returns to the starting node.
[2024-11-28 13:22:51,971][root][INFO] - Functions name: [search_routine,_run_episode]
[2024-11-28 13:22:51,974][root][INFO] - Evaluating seed function...
[2024-11-28 13:22:51,974][root][INFO] - Seed function code: 
from numpy.linalg import inv, norm, pinv
from TSPEnv import TSPEnv as Env
from TSPModel import TSPModel as Model
from dataclasses import dataclass
def search_routine(env: Env, model: Model, episodes: float, batch_size: int = 10, aug_factor: int = 8) -> float:
    """
    Uses a pre-trained model to determine the minimum total distance for the TSP problem.

    Args:
        env: The TSP environment.
        model: The pre-trained TSP model.
        episodes: Number of episodes to run.
        batch_size: The batch size for processing problems.
        aug_factor: Augmentation factor for data.

    Returns:
        The total distance of the minimum valid solution.
    """

    total_distance = 0
    for _ in range(int(episodes)):
        total_distance += _run_episode(env, model, batch_size, aug_factor)

    return total_distance / episodes
def _run_episode(env: Env, model: Model, batch_size: int, aug_factor: int) -> float:
    """
    Runs a single episode of the TSP problem.

    Args:
        env: The TSP environment.
        model: The pre-trained TSP model.
        batch_size: The batch size for processing problems.
        aug_factor: Augmentation factor for data.

    Returns:
        The minimum travel distance found in the episode.
    """
    env.load_problems(batch_size, aug_factor)
    reset_state, _, _ = env.reset()
    model.pre_forward(reset_state)

    done = False
    while not done:
        state, _, _ = env.pre_step()
        selected, _ = model.forward(state)
        step_state, reward, done = env.step(selected)

    return -reward.min().item()  # reward is negative distance
[2024-11-28 13:22:51,979][root][INFO] - Iteration 0: Running Code 0
[2024-11-28 13:22:55,825][root][INFO] - Iteration 0: Code Run 0 successful!
[2024-11-28 13:22:56,396][root][INFO] - Iteration 0, response_id 0: Objective value: inf
