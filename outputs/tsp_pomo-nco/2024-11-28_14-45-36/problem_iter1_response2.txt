```python
def search_routine_v2(env: Env, model: Model, episodes: float, batch_size: int = 10, aug_factor: int = 8) -> float:
    """
    Executes an enhanced POMO algorithm for the TSP with additional heuristics.

    Args:
        env: The TSP environment.
        model: The pre-trained TSP model.
        episodes: Number of episodes to run.
        batch_size: Size of the problem batch.
        aug_factor: Augmentation factor for data.

    Returns:
        The total distance of the minimum valid solution.
    """
    model.eval()
    model.to(model.device)  # Ensure model is on the correct device

    env.load_problems(batch_size, aug_factor)
    total_reward = 0
    min_distance = float('inf')

    for _ in range(int(episodes)):
        rewards = _run_episode(env, model)
        total_reward += rewards.mean().item()
        current_distance = -rewards.mean().item()
        
        # Apply heuristic: 2-opt local search
        for i in range(batch_size):
            tour = env.get_current_tour(i)
            improved_tour = two_opt(tour)
            improved_distance = env.calculate_tour_distance(improved_tour)
            if improved_distance < current_distance:
                current_distance = improved_distance
        
        if current_distance < min_distance:
            min_distance = current_distance
        
        torch.cuda.empty_cache()  # Clear GPU cache

    return min_distance

def two_opt(tour: list) -> list:
    """
    Applies the 2-opt heuristic to improve the tour.

    Args:
        tour: The current tour.

    Returns:
        The improved tour.
    """
    improved = True
    while improved:
        improved = False
        for i in range(1, len(tour) - 2):
            for j in range(i + 1, len(tour)):
                if j - i == 1: continue  # No improvement possible
                new_tour = tour[:]
                new_tour[i:j] = tour[j - 1:i - 1:-1]
                if calculate_distance(new_tour) < calculate_distance(tour):
                    tour = new_tour
                    improved = True
    return tour

def calculate_distance(tour: list) -> float:
    """
    Calculates the total distance of the tour.

    Args:
        tour: The tour to calculate the distance for.

    Returns:
        The total distance of the tour.
    """
    distance = 0
    for i in range(len(tour) - 1):
        distance += env.get_distance(tour[i], tour[i + 1])
    distance += env.get_distance(tour[-1], tour[0])  # Return to start
    return distance
```
