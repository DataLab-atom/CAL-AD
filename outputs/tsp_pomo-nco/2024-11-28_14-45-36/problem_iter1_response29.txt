```python
def search_routine_v2(env: Env, model: Model, episodes: float, batch_size: int = 10, aug_factor: int = 8) -> float:
    """
    Executes an enhanced POMO algorithm for the TSP with additional heuristics.

    Args:
        env: The TSP environment.
        model: The pre-trained TSP model.
        episodes: Number of episodes to run.
        batch_size: Size of the problem batch.
        aug_factor: Augmentation factor for data.

    Returns:
        The total distance of the minimum valid solution.
    """
    model.eval()
    model.to(model.device)  # Ensure model is on the correct device

    env.load_problems(batch_size, aug_factor)
    total_reward = 0
    best_solution = None
    best_distance = float('inf')

    for _ in range(int(episodes)):
        rewards = _run_episode(env, model)
        total_reward += rewards.mean().item()
        torch.cuda.empty_cache()  # Clear GPU cache

        # Apply heuristic: 2-opt local search
        current_solution = env.get_current_solution()
        improved_solution, improved_distance = _two_opt_search(current_solution, env.problems)

        if improved_distance < best_distance:
            best_solution = improved_solution
            best_distance = improved_distance

    total_distance = best_distance  # Use the best distance found
    return total_distance

def _two_opt_search(solution: torch.Tensor, problems: torch.Tensor) -> (torch.Tensor, float):
    """
    Applies a 2-opt local search heuristic to improve the given solution.

    Args:
        solution: The current TSP solution.
        problems: The TSP problem instances.

    Returns:
        The improved solution and its total distance.
    """
    improved = True
    best_solution = solution.clone()
    best_distance = _calculate_distance(best_solution, problems)

    while improved:
        improved = False
        for i in range(1, len(best_solution) - 2):
            for j in range(i + 1, len(best_solution)):
                if j - i == 1: continue  # No improvement possible
                new_solution = best_solution.clone()
                new_solution[i:j] = best_solution[j - 1:i - 1:-1]
                new_distance = _calculate_distance(new_solution, problems)

                if new_distance < best_distance:
                    best_solution = new_solution
                    best_distance = new_distance
                    improved = True

    return best_solution, best_distance

def _calculate_distance(solution: torch.Tensor, problems: torch.Tensor) -> float:
    """
    Calculates the total distance of the given solution.

    Args:
        solution: The TSP solution.
        problems: The TSP problem instances.

    Returns:
        The total distance of the solution.
    """
    total_distance = 0
    for i in range(len(solution) - 1):
        total_distance += problems[solution[i], solution[i + 1]]
    total_distance += problems[solution[-1], solution[0]]  # Return to start
    return total_distance
```
