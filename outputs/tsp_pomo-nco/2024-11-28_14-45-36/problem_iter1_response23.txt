```python
def search_routine_v2(env: Env, model: Model, episodes: float, batch_size: int = 10, aug_factor: int = 8, heuristic_factor: float = 0.1) -> float:
    """
    Executes an enhanced POMO algorithm for the TSP, incorporating heuristic adjustments.

    Args:
        env: The TSP environment.
        model: The pre-trained TSP model.
        episodes: Number of episodes to run.
        batch_size: Size of the problem batch.
        aug_factor: Augmentation factor for data.
        heuristic_factor: Factor to adjust rewards based on heuristic insights.

    Returns:
        The total distance of the minimum valid solution.
    """
    model.eval()
    model.to(model.device)  # Ensure model is on the correct device

    env.load_problems(batch_size, aug_factor)
    total_reward = 0
    heuristic_adjustments = []

    for _ in range(int(episodes)):
        rewards = _run_episode(env, model)
        heuristic_adjustment = rewards.mean().item() * heuristic_factor
        heuristic_adjustments.append(heuristic_adjustment)
        total_reward += rewards.mean().item() + heuristic_adjustment
        torch.cuda.empty_cache()  # Clear GPU cache

    total_distance = -total_reward / episodes  # Optimization goal is negative reward
    return total_distance
```
