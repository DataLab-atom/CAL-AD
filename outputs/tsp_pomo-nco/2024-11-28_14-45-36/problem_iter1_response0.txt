```python
def search_routine_v2(env: Env, model: Model, episodes: float, batch_size: int = 10, aug_factor: int = 8) -> float:
    """
    Executes an enhanced POMO algorithm for the TSP, incorporating heuristic-based initial solutions.

    Args:
        env: The TSP environment.
        model: The pre-trained TSP model.
        episodes: Number of episodes to run.
        batch_size: Size of the problem batch.
        aug_factor: Augmentation factor for data.

    Returns:
        The total distance of the minimum valid solution.
    """
    model.eval()
    model.to(model.device)  # Ensure model is on the correct device

    env.load_problems(batch_size, aug_factor)
    total_reward = 0
    best_solution = float('inf')

    def heuristic_initial_solution(env: Env) -> torch.Tensor:
        """
        Generates an initial solution using a simple heuristic (nearest neighbor).
        """
        problems = env.problems
        batch_size, num_nodes, _ = problems.shape
        solution = torch.zeros((batch_size, num_nodes), dtype=torch.long, device=problems.device)
        visited = torch.zeros((batch_size, num_nodes), dtype=torch.bool, device=problems.device)

        for b in range(batch_size):
            current_node = torch.randint(0, num_nodes, (1,), device=problems.device)
            for n in range(num_nodes):
                solution[b, n] = current_node
                visited[b, current_node] = True
                distances = torch.norm(problems[b] - problems[b, current_node], dim=1)
                distances[visited[b]] = float('inf')
                current_node = torch.argmin(distances)

        return solution

    for _ in range(int(episodes)):
        # Apply heuristic to get an initial solution
        initial_solution = heuristic_initial_solution(env)
        env.set_initial_solution(initial_solution)

        rewards = _run_episode(env, model)
        total_reward += rewards.mean().item()
        best_solution = min(best_solution, -rewards.min().item())
        torch.cuda.empty_cache()  # Clear GPU cache

    total_distance = best_solution  # Use the best solution found
    return total_distance
```
