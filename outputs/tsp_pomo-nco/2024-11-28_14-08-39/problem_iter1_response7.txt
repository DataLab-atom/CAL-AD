```python
def _run_episode_v2(env: Env, model: Model, batch_size: int, aug_factor: int) -> float:
    """
    Runs a single episode of the TSP problem with additional heuristics.

    Args:
        env: The TSP environment.
        model: The pre-trained TSP model.
        batch_size: The batch size for processing problems.
        aug_factor: Augmentation factor for data.

    Returns:
        The minimum travel distance found in the episode.
    """
    env.load_problems(batch_size, aug_factor)
    reset_state, _, _ = env.reset()
    model.pre_forward(reset_state)

    done = False
    min_distance = float('inf')
    while not done:
        state, _, _ = env.pre_step()
        selected, _ = model.forward(state)
        step_state, reward, done = env.step(selected)

        # Apply heuristic: Nearest Neighbor
        if not done:
            current_node = selected.item()
            remaining_nodes = torch.where(step_state.visited == 0)[0]
            nearest_node = remaining_nodes[torch.argmin(env.distance_matrix[current_node, remaining_nodes])]
            selected = torch.tensor([nearest_node])
            step_state, reward, done = env.step(selected)

        # Update minimum distance
        min_distance = min(min_distance, -reward.item())

    return min_distance
```
