```python
def _run_episode_v2(env: Env, model: Model, batch_size: int, aug_factor: int) -> float:
    """
    Runs a single episode of the TSP problem with additional heuristics.

    Args:
        env: The TSP environment.
        model: The pre-trained TSP model.
        batch_size: The batch size for processing problems.
        aug_factor: Augmentation factor for data.

    Returns:
        The minimum travel distance found in the episode.
    """
    env.load_problems(batch_size, aug_factor)
    reset_state, _, _ = env.reset()
    model.pre_forward(reset_state)

    done = False
    min_distance = float('inf')
    while not done:
        state, _, _ = env.pre_step()
        selected, _ = model.forward(state)
        step_state, reward, done = env.step(selected)

        # Apply heuristic: Nearest Neighbor
        if not done:
            distances = torch.cdist(state, state, p=2)
            nearest_neighbor = torch.argmin(distances[selected[-1]], dim=0)
            if nearest_neighbor not in selected:
                selected = torch.cat((selected, torch.tensor([nearest_neighbor])))
                step_state, reward, done = env.step(selected)

        # Update minimum distance
        current_distance = -reward.min().item()
        if current_distance < min_distance:
            min_distance = current_distance

    return min_distance
```
