```python
def _run_episode_v2(env: Env, model: Model, batch_size: int, aug_factor: int) -> float:
    """
    Runs a single episode of the TSP problem with enhanced exploration strategy.

    Args:
        env: The TSP environment.
        model: The pre-trained TSP model.
        batch_size: The batch size for processing problems.
        aug_factor: Augmentation factor for data.

    Returns:
        The minimum travel distance found in the episode.
    """
    env.load_problems(batch_size, aug_factor)
    reset_state, _, _ = env.reset()
    model.pre_forward(reset_state)

    total_reward = 0
    done = False
    visited_nodes = set()

    while not done:
        state, _, _ = env.pre_step()
        
        # Obtain action probabilities and select based on temperature for exploration
        action_probabilities, _ = model.forward(state)
        selected_action = torch.multinomial(action_probabilities, num_samples=1).squeeze()

        # Prevent revisiting already visited nodes
        if selected_action.item() in visited_nodes:
            # Re-select action if already visited
            continue

        visited_nodes.add(selected_action.item())
        step_state, reward, done = env.step(selected_action)

        total_reward += reward.item()

    return -total_reward  # Return the total negative reward as the total travel distance
```
