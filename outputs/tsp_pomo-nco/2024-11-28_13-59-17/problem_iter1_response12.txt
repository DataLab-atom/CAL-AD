```python
def _run_episode_v2(env: Env, model: Model, batch_size: int, aug_factor: int) -> float:
    """
    Runs a single episode of the TSP problem with enhanced heuristics.

    Args:
        env: The TSP environment.
        model: The pre-trained TSP model.
        batch_size: The batch size for processing problems.
        aug_factor: Augmentation factor for data.

    Returns:
        The minimum travel distance found in the episode.
    """
    # Load problems into the environment
    env.load_problems(batch_size, aug_factor)
    
    # Reset the environment to get the initial state
    reset_state, _, _ = env.reset()
    model.pre_forward(reset_state)

    total_reward = 0
    done = False
    num_steps = 0

    while not done:
        # Retrieve the current state and predict the next action
        state, _, _ = env.pre_step()
        selected, action_probs = model.forward(state)

        # Apply a heuristic to select the next action based on probabilities
        if np.random.rand() < 0.1:  # Introduce exploration randomly
            selected = np.random.choice(range(len(action_probs)), p=action_probs.numpy())

        # Step the environment with the selected action
        step_state, reward, done = env.step(selected)
        total_reward += reward.item()
        num_steps += 1

        # Optional: Implement early stopping if a certain number of steps are reached
        if num_steps >= 100:
            break

    # Return the negative of the total reward as the minimum travel distance
    return -total_reward  # reward is negative distance
```
