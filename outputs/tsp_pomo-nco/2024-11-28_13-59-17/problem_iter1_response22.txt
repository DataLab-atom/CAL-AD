```python
def _run_episode_v2(env: Env, model: Model, batch_size: int, aug_factor: int) -> float:
    """
    Runs a single episode of the TSP problem with enhanced strategy.

    Args:
        env: The TSP environment.
        model: The pre-trained TSP model.
        batch_size: The batch size for processing problems.
        aug_factor: Augmentation factor for data.

    Returns:
        The minimum travel distance found in the episode.
    """
    env.load_problems(batch_size, aug_factor)
    reset_state, _, _ = env.reset()
    model.pre_forward(reset_state)

    total_reward = 0
    steps_taken = 0
    done = False
    
    while not done:
        state, _, _ = env.pre_step()
        selected, _ = model.forward(state)

        # Introduce a heuristic strategy to explore more promising routes
        if steps_taken < 5:  # Allow more exploration in the first few steps
            selected = np.random.choice(env.get_valid_actions(state), size=len(selected), replace=False)

        step_state, reward, done = env.step(selected)
        total_reward += reward
        steps_taken += 1

    return -total_reward / steps_taken  # Return average negative reward as distance
```
