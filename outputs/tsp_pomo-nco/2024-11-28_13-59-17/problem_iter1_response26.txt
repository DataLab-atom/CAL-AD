```python
def _run_episode_v2(env: Env, model: Model, batch_size: int, aug_factor: int) -> float:
    """
    Runs a single episode of the TSP problem using a more advanced selection strategy.

    Args:
        env: The TSP environment.
        model: The pre-trained TSP model.
        batch_size: The batch size for processing problems.
        aug_factor: Augmentation factor for data.

    Returns:
        The minimum travel distance found in the episode.
    """
    env.load_problems(batch_size, aug_factor)
    reset_state, _, _ = env.reset()
    model.pre_forward(reset_state)

    total_reward = 0
    done = False
    visited_nodes = set()

    while not done:
        state, _, _ = env.pre_step()
        selected, log_probs = model.forward(state)
        
        # Track visited nodes to avoid revisiting
        for node in selected:
            if node.item() not in visited_nodes:
                visited_nodes.add(node.item())
                total_reward += log_probs[node].item()  # accumulate reward

        step_state, reward, done = env.step(selected)
    
    # Return the minimum travel distance as negative reward
    return -total_reward / len(visited_nodes)  # average negative reward
```
