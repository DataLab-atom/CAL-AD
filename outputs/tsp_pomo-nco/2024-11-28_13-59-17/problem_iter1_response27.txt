```python
def _run_episode_v2(env: Env, model: Model, batch_size: int, aug_factor: int) -> float:
    """
    Runs a single episode of the TSP problem with enhanced decision-making.

    Args:
        env: The TSP environment.
        model: The pre-trained TSP model.
        batch_size: The batch size for processing problems.
        aug_factor: Augmentation factor for data.

    Returns:
        The minimum travel distance found in the episode.
    """
    env.load_problems(batch_size, aug_factor)
    reset_state, _, _ = env.reset()
    model.pre_forward(reset_state)

    total_reward = 0
    done = False
    while not done:
        state, _, _ = env.pre_step()
        selected, logits = model.forward(state)

        # Implement a heuristic selection based on the predicted distance
        predicted_distances = torch.softmax(logits, dim=-1)
        selected_action = torch.multinomial(predicted_distances, 1)

        step_state, reward, done = env.step(selected_action)
        total_reward += reward.item()

    return -total_reward  # Total reward is negative distance
```
