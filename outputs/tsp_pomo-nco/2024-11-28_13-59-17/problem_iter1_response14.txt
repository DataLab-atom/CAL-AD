```python
def _run_episode_v2(env: Env, model: Model, batch_size: int, aug_factor: int) -> float:
    """
    Runs a single episode of the TSP problem using an enhanced strategy.

    Args:
        env: The TSP environment.
        model: The pre-trained TSP model.
        batch_size: The batch size for processing problems.
        aug_factor: Augmentation factor for data.

    Returns:
        The minimum travel distance found in the episode.
    """
    env.load_problems(batch_size, aug_factor)
    initial_state, _, _ = env.reset()
    model.pre_forward(initial_state)

    done = False
    total_reward = 0
    steps = 0

    while not done:
        state, _, _ = env.pre_step()
        selected, _ = model.forward(state)
        
        # Alternate between exploration and exploitation
        if steps % 5 == 0:  # Every 5 steps, introduce some randomness
            selected = np.random.choice(env.num_nodes, size=batch_size) 

        step_state, reward, done = env.step(selected)
        total_reward += reward.item()
        steps += 1

    return -total_reward  # Return total negative distance as minimum travel distance
```
