```python
def _run_episode_v2(env: Env, model: Model, batch_size: int, aug_factor: int) -> float:
    """
    Runs a single episode of the TSP problem using a refined approach to leverage heuristics.

    Args:
        env: The TSP environment.
        model: The pre-trained TSP model.
        batch_size: The batch size for processing problems.
        aug_factor: Augmentation factor for data.

    Returns:
        The minimum travel distance found in the episode.
    """
    env.load_problems(batch_size, aug_factor)
    reset_state, _, _ = env.reset()
    model.pre_forward(reset_state)

    total_reward = 0
    steps_taken = 0
    done = False

    while not done:
        state, _, _ = env.pre_step()
        selected, action_probabilities = model.forward(state)

        # Incorporate a heuristic: Prefer actions that have higher probability.
        heuristic_action = np.argmax(action_probabilities.detach().cpu().numpy())
        selected = torch.tensor([heuristic_action]).to(selected.device)

        step_state, reward, done = env.step(selected)
        total_reward += reward.item()
        steps_taken += 1

    average_reward = total_reward / steps_taken if steps_taken > 0 else 0
    return -average_reward  # reward is negative distance
```
