```python
def _run_episode_v2(env: Env, model: Model, batch_size: int, aug_factor: int) -> float:
    """
    Runs a single episode of the TSP problem with enhanced heuristics.

    Args:
        env: The TSP environment.
        model: The pre-trained TSP model.
        batch_size: The batch size for processing problems.
        aug_factor: Augmentation factor for data.

    Returns:
        The minimum travel distance found in the episode.
    """
    env.load_problems(batch_size, aug_factor)
    reset_state, _, _ = env.reset()
    model.pre_forward(reset_state)

    done = False
    total_reward = 0
    steps = 0

    while not done:
        state, _, _ = env.pre_step()
        selected, logits = model.forward(state)

        # Implement heuristic to prefer unvisited nodes
        unvisited_mask = env.get_unvisited_mask()
        selected = selected * unvisited_mask  # Zero out visited nodes
        selected = selected / selected.sum()  # Normalize to get probabilities
        
        # Sample action based on augmented probabilities
        action = np.random.choice(len(selected), p=selected.cpu().numpy())
        step_state, reward, done = env.step(action)

        total_reward += reward
        steps += 1

        # Optional: Utilize the heuristic to further optimize selection in next steps
        if steps > 1:
            heuristic_adjustment = env.get_heuristic_adjustment(step_state)
            selected += heuristic_adjustment
        
    return -total_reward.item()  # reward is negative distance
```
