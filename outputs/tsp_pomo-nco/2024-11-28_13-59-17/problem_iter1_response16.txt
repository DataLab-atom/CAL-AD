```python
def _run_episode_v2(env: Env, model: Model, batch_size: int, aug_factor: int) -> float:
    """
    Runs a single episode of the TSP problem with additional heuristics for better exploration.

    Args:
        env: The TSP environment.
        model: The pre-trained TSP model.
        batch_size: The batch size for processing problems.
        aug_factor: Augmentation factor for data.

    Returns:
        The minimum travel distance found in the episode.
    """
    env.load_problems(batch_size, aug_factor)
    reset_state, _, _ = env.reset()
    model.pre_forward(reset_state)

    total_reward = 0
    done = False
    steps = 0
    max_steps = 100  # Limit the number of steps to avoid infinite loops

    while not done and steps < max_steps:
        state, _, _ = env.pre_step()
        selected, _ = model.forward(state)

        # Apply a heuristic to prefer less traveled edges
        if hasattr(env, 'get_edge_weights'):
            edge_weights = env.get_edge_weights()
            selected = apply_heuristic(selected, edge_weights)

        step_state, reward, done = env.step(selected)
        total_reward += reward
        steps += 1

    return -total_reward / max(1, steps)  # Average negative reward as distance

def apply_heuristic(selected, edge_weights):
    """
    Modify the selected actions based on edge weights to prefer lower cost edges.

    Args:
        selected: The selected actions from the model.
        edge_weights: Weights for the edges based on previous distances.

    Returns:
        Updated selected actions considering the heuristic.
    """
    # Example heuristic: prioritize nodes with lower edge weights
    heuristic_selected = sorted(selected, key=lambda x: edge_weights[x])
    return heuristic_selected[:len(selected)]  # Return same number of actions
```
