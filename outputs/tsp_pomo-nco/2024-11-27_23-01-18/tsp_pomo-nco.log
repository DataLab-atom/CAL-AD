[2024-11-27 23:01:18,550][root][INFO] - Workspace: F:\AEL-P-SNE\outputs\tsp_pomo-nco\2024-11-27_23-01-18
[2024-11-27 23:01:18,550][root][INFO] - Project Root: F:\AEL-P-SNE
[2024-11-27 23:01:18,551][root][INFO] - Using LLM: deepseek-coder
[2024-11-27 23:01:18,551][root][INFO] - Using Algorithm: reevo
[2024-11-27 23:01:19,282][root][INFO] - Problem: tsp_pomo
[2024-11-27 23:01:19,282][root][INFO] - Problem description: Assisting in solving the Traveling Salesman Problem (TSP) with some prior heuristics. TSP requires finding the shortest path that visits all given nodes and returns to the starting node.
[2024-11-27 23:01:19,283][root][INFO] - Functions name: [initialize_population,calculate_fitness,select_parents,crossover,mutate,search_routine]
[2024-11-27 23:01:19,284][root][INFO] - Functions name in Iter: [crossover]
[2024-11-27 23:01:19,286][root][INFO] - Evaluating seed function...
[2024-11-27 23:01:19,286][root][INFO] - Seed function code: 
from numpy.linalg import inv, norm, pinv
import random
from typing import Callable
from typing import Tuple
import numpy as np
def initialize_population(num_points: int, pop_size: int) -> np.ndarray:
    """
    Initialize a population of random routes.
    
    Parameters:
    - num_points: int, number of points in the TSP.
    - pop_size: int, size of the population.
    
    Returns:
    - np.ndarray, population of routes.
    """
    population = [np.random.permutation(num_points) for _ in range(pop_size)]
    return np.array(population)
def calculate_fitness(population: np.ndarray, distance_matrix: np.ndarray, cal_total_distance: Callable) -> np.ndarray:
    """
    Calculate the fitness (total distance) for each route in the population.
    
    Parameters:
    - population: np.ndarray, population of routes.
    - distance_matrix: np.ndarray, distance matrix.
    - cal_total_distance: Callable, function to calculate total distance.
    
    Returns:
    - np.ndarray, fitness values for each route.
    """
    fitness = np.array([cal_total_distance(route, distance_matrix) for route in population])
    return fitness
def select_parents(population: np.ndarray, fitness: np.ndarray) -> Tuple[np.ndarray, np.ndarray]:
    """
    Select parents based on fitness using roulette wheel selection.
    
    Parameters:
    - population: np.ndarray, population of routes.
    - fitness: np.ndarray, fitness values for each route.
    
    Returns:
    - Tuple[np.ndarray, np.ndarray], selected parents.
    """
    fitness = 1 / fitness  # Invert fitness to get higher values for better routes
    fitness_sum = np.sum(fitness)
    probabilities = fitness / fitness_sum
    indices = np.random.choice(len(population), size=2, p=probabilities, replace=False)
    return population[indices[0]], population[indices[1]]
def crossover(parent1: np.ndarray, parent2: np.ndarray) -> np.ndarray:
    """
    Perform ordered crossover to create a child route.
    
    Parameters:
    - parent1: np.ndarray, first parent route.
    - parent2: np.ndarray, second parent route.
    
    Returns:
    - np.ndarray, child route.
    """
    size = len(parent1)
    start, end = sorted(np.random.choice(size, 2, replace=False))
    child = np.zeros(size, dtype=int)
    child[start:end] = parent1[start:end]
    for i in range(size):
        if parent2[i] not in child:
            for j in range(size):
                if child[j] == 0:
                    child[j] = parent2[i]
                    break
    return child
def mutate(route: np.ndarray, mutation_rate: float) -> np.ndarray:
    """
    Mutate a route by swapping two points with a given mutation rate.
    
    Parameters:
    - route: np.ndarray, route to mutate.
    - mutation_rate: float, probability of mutation.
    
    Returns:
    - np.ndarray, mutated route.
    """
    if np.random.rand() < mutation_rate:
        idx1, idx2 = np.random.choice(len(route), 2, replace=False)
        route[idx1], route[idx2] = route[idx2], route[idx1]
    return route
def search_routine(cal_total_distance: Callable, distance_matrix: np.ndarray, pop_size: int = 100, num_generations: int = 1000, mutation_rate: float = 0.01) -> np.ndarray:
    """
    Perform the POMO algorithm to find the optimal route.
    
    Parameters:
    - cal_total_distance: Callable, function to calculate total distance.
    - distance_matrix: np.ndarray, distance matrix.
    - pop_size: int, size of the population.
    - num_generations: int, number of generations to run the algorithm.
    - mutation_rate: float, probability of mutation.
    
    Returns:
    - np.ndarray, best route found.
    """
    num_points = distance_matrix.shape[0]
    population = initialize_population(num_points, pop_size)
    
    for generation in range(num_generations):
        fitness = calculate_fitness(population, distance_matrix, cal_total_distance)
        new_population = []
        
        for _ in range(pop_size // 2):
            parent1, parent2 = select_parents(population, fitness)
            child1 = crossover(parent1, parent2)
            child2 = crossover(parent2, parent1)
            child1 = mutate(child1, mutation_rate)
            child2 = mutate(child2, mutation_rate)
            new_population.append(child1)
            new_population.append(child2)
        
        population = np.array(new_population)
    
    best_ind = population[np.argmin(calculate_fitness(population, distance_matrix, cal_total_distance))]
    return best_ind
[2024-11-27 23:01:19,289][root][INFO] - Iteration 0: Running Code 0
[2024-11-27 23:01:19,662][root][INFO] - Iteration 0: Code Run 0 successful!
[2024-11-27 23:01:19,696][root][INFO] - Iteration 0, response_id 0: Objective value: inf
