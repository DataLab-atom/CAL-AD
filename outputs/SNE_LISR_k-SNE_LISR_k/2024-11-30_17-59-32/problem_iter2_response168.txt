def srk(G: np.ndarray, A: np.ndarray, U: np.ndarray) -> np.ndarray:
    """Compute the symmetric rank-k update with enhanced numerical stability."""
    if np.allclose(G @ U, A @ U):
        return G
    
    # Compute the difference matrix
    diff = G - A
    
    # Project the difference onto the subspace defined by U
    proj_diff = U.T @ diff @ U
    
    # Check for singularity in the projected difference
    if np.linalg.matrix_rank(proj_diff) < U.shape[1]:
        # Use a robust pseudo-inverse to handle singularity
        proj_diff_pinv = np.linalg.pinv(proj_diff)
        return G - diff @ U @ proj_diff_pinv @ U.T @ diff
    
    # Compute the update term
    update_term = diff @ U @ np.linalg.inv(proj_diff) @ U.T @ diff
    
    # Return the updated matrix
    return G - update_term
