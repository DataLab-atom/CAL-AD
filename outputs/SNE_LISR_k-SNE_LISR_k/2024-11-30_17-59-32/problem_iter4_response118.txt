def srk(G: np.ndarray, A: np.ndarray, U: np.ndarray) -> np.ndarray:
    """Compute the symmetric rank-k update with enhanced numerical stability."""
    if np.allclose(G @ U, A @ U):
        return G
    
    # Compute the difference and its projection
    diff = G - A
    proj = U.T @ diff @ U
    
    # Check for singularity and handle it robustly
    if np.linalg.matrix_rank(proj) < U.shape[1]:
        # Use a robust pseudo-inverse to handle singularity
        proj_inv = np.linalg.pinv(proj)
    else:
        proj_inv = np.linalg.inv(proj)
    
    # Compute the update term
    update_term = diff @ U @ proj_inv @ U.T @ diff
    
    # Apply the update to G
    G_updated = G - update_term
    
    return G_updated
