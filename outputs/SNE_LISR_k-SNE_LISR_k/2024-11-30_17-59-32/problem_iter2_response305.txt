def compute_omega(t: int, n: int, r0: float, rho: float, M: float, L: float) -> float:
    """Compute the scaling parameter omega with a more dynamic decay and scaling."""
    if t % n == 0:
        decay_factor = np.exp(-rho * (t // n))
        scaling_factor = M * np.sqrt(L) * r0
        return (1 + scaling_factor * decay_factor)**2
    return 1.0
