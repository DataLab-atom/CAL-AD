def greedy_matrix(G: np.ndarray, A: np.ndarray, k: int) -> np.ndarray:
    """Select the greedy matrix U using a combination of row norms and diagonal differences."""
    diff = np.abs(np.diag(G - A))
    row_norms = np.linalg.norm(G - A, axis=1)
    combined_scores = diff + 0.5 * row_norms  # Weighted combination of norms and differences
    indices = np.argpartition(combined_scores, -k)[-k:]  # Efficient top-k selection
    U = np.zeros((G.shape[0], k))
    U[indices, np.arange(k)] = 1
    return U
