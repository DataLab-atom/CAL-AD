def compute_omega(t: int, n: int, r0: float, rho: float, M: float, L: float) -> float:
    """Compute the scaling parameter omega with a more complex decay and scaling mechanism."""
    if t % n == 0:
        decay_factor = rho**(t // n)
        scale_factor = M * np.sqrt(L) * r0
        return (1 + scale_factor * decay_factor)**2 + np.log(1 + scale_factor * decay_factor)
    return 1.0
