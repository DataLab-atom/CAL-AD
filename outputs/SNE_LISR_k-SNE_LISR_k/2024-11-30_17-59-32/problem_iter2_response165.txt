def sherman_morrison(A_inv: np.ndarray, U: np.ndarray, V: np.ndarray, W: np.ndarray) -> np.ndarray:
    """Compute the Sherman-Morrison update with enhanced numerical stability."""
    temp = W - U.T @ A_inv @ V
    if np.linalg.matrix_rank(temp) < U.shape[1]:  # Handle singularity
        return A_inv  # or implement a robust pseudo-inverse
    
    # Compute the inverse of temp using Cholesky decomposition for better stability
    try:
        L = np.linalg.cholesky(temp)
        temp_inv = np.linalg.inv(L.T) @ np.linalg.inv(L)
    except np.linalg.LinAlgError:
        # Fallback to standard inverse if Cholesky fails
        temp_inv = np.linalg.inv(temp)
    
    return A_inv + A_inv @ U @ temp_inv @ V.T @ A_inv
