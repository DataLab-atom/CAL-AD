def srk(G: np.ndarray, A: np.ndarray, U: np.ndarray) -> np.ndarray:
    """Compute the symmetric rank-k update with enhanced numerical stability."""
    if np.allclose(G @ U, A @ U):
        return G
    
    # Compute the difference and project it onto U
    diff = G - A
    proj_diff = U.T @ diff @ U
    
    # Check for singularity in the projected difference
    if np.linalg.matrix_rank(proj_diff) < U.shape[1]:
        return G  # or implement a robust pseudo-inverse
    
    # Compute the inverse of the projected difference
    proj_diff_inv = np.linalg.inv(proj_diff)
    
    # Perform the symmetric rank-k update with enhanced stability
    update = diff @ U @ proj_diff_inv @ U.T @ diff
    G_new = G - update
    
    return G_new
